
rtos_exercise6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004990  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004b30  08004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf8  08004bf8  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004bf8  08004bf8  00005bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c00  08004c00  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c00  08004c00  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c04  08004c04  00005c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004c08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba0  20000060  08004c68  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c00  08004c68  00006c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d0f  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dae  00000000  00000000  00019d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d99  00000000  00000000  0001dcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d4c  00000000  00000000  0001ea91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c91  00000000  00000000  000217dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095094  00000000  00000000  0003446e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce8  00000000  00000000  000c9548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ce230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b18 	.word	0x08004b18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004b18 	.word	0x08004b18

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	StartFlag = 1;
 80004d4:	4b19      	ldr	r3, [pc, #100]	@ (800053c <main+0x6c>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
	GreenFlag = 1;
 80004da:	4b19      	ldr	r3, [pc, #100]	@ (8000540 <main+0x70>)
 80004dc:	2201      	movs	r2, #1
 80004de:	701a      	strb	r2, [r3, #0]
	RedFlag = 1;
 80004e0:	4b18      	ldr	r3, [pc, #96]	@ (8000544 <main+0x74>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa93 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f841 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f89f 	bl	8000630 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, HIGH);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004f8:	4813      	ldr	r0, [pc, #76]	@ (8000548 <main+0x78>)
 80004fa:	f000 fd31 	bl	8000f60 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fe:	f001 fc77 	bl	8001df0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000502:	4a12      	ldr	r2, [pc, #72]	@ (800054c <main+0x7c>)
 8000504:	2100      	movs	r1, #0
 8000506:	4812      	ldr	r0, [pc, #72]	@ (8000550 <main+0x80>)
 8000508:	f001 fcbc 	bl	8001e84 <osThreadNew>
 800050c:	4603      	mov	r3, r0
 800050e:	4a11      	ldr	r2, [pc, #68]	@ (8000554 <main+0x84>)
 8000510:	6013      	str	r3, [r2, #0]

  /* creation of Green_Led_Flash */
  Green_Led_FlashHandle = osThreadNew(GreenTask, NULL, &Green_Led_Flash_attributes);
 8000512:	4a11      	ldr	r2, [pc, #68]	@ (8000558 <main+0x88>)
 8000514:	2100      	movs	r1, #0
 8000516:	4811      	ldr	r0, [pc, #68]	@ (800055c <main+0x8c>)
 8000518:	f001 fcb4 	bl	8001e84 <osThreadNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <main+0x90>)
 8000520:	6013      	str	r3, [r2, #0]

  /* creation of Red_Led_Flash */
  Red_Led_FlashHandle = osThreadNew(RedTask, NULL, &Red_Led_Flash_attributes);
 8000522:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <main+0x94>)
 8000524:	2100      	movs	r1, #0
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <main+0x98>)
 8000528:	f001 fcac 	bl	8001e84 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a0f      	ldr	r2, [pc, #60]	@ (800056c <main+0x9c>)
 8000530:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000532:	f001 fc81 	bl	8001e38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <main+0x66>
 800053a:	bf00      	nop
 800053c:	20000088 	.word	0x20000088
 8000540:	2000008a 	.word	0x2000008a
 8000544:	20000089 	.word	0x20000089
 8000548:	40020000 	.word	0x40020000
 800054c:	08004b74 	.word	0x08004b74
 8000550:	08000735 	.word	0x08000735
 8000554:	2000007c 	.word	0x2000007c
 8000558:	08004b98 	.word	0x08004b98
 800055c:	08000745 	.word	0x08000745
 8000560:	20000080 	.word	0x20000080
 8000564:	08004bbc 	.word	0x08004bbc
 8000568:	08000789 	.word	0x08000789
 800056c:	20000084 	.word	0x20000084

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	@ 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 f9e2 	bl	8004948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <SystemClock_Config+0xb8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	4a22      	ldr	r2, [pc, #136]	@ (8000628 <SystemClock_Config+0xb8>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a4:	4b20      	ldr	r3, [pc, #128]	@ (8000628 <SystemClock_Config+0xb8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <SystemClock_Config+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005bc:	4a1b      	ldr	r2, [pc, #108]	@ (800062c <SystemClock_Config+0xbc>)
 80005be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	@ (800062c <SystemClock_Config+0xbc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fcd5 	bl	8000f94 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f0:	f000 f8fe 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f000 ff38 	bl	8001484 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061a:	f000 f8e9 	bl	80007f0 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <MX_GPIO_Init+0x80>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a18      	ldr	r2, [pc, #96]	@ (80006b0 <MX_GPIO_Init+0x80>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <MX_GPIO_Init+0x80>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_GPIO_Init+0x80>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a11      	ldr	r2, [pc, #68]	@ (80006b0 <MX_GPIO_Init+0x80>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_GPIO_Init+0x80>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, green_Pin|yellow_Pin|red_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 51b0 	mov.w	r1, #5632	@ 0x1600
 8000684:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <MX_GPIO_Init+0x84>)
 8000686:	f000 fc6b 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : green_Pin yellow_Pin red_Pin */
  GPIO_InitStruct.Pin = green_Pin|yellow_Pin|red_Pin;
 800068a:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 800068e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <MX_GPIO_Init+0x84>)
 80006a4:	f000 fad8 	bl	8000c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000

080006b8 <AccessSharedData>:

/* USER CODE BEGIN 4 */
void AccessSharedData(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    if (StartFlag == 1) {
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <AccessSharedData+0x3c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d103      	bne.n	80006cc <AccessSharedData+0x14>
        // Set Start flag to Down to indicate resource is in use
        StartFlag = 0;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <AccessSharedData+0x3c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e005      	b.n	80006d8 <AccessSharedData+0x20>
    } else {
        // Resource contention: Turn on Blue LED
        HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, HIGH);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <AccessSharedData+0x40>)
 80006d4:	f000 fc44 	bl	8000f60 <HAL_GPIO_WritePin>
    }

    // Simulate read/write operations with a delay of 500 milliseconds
    SimulateReadWriteOperation();
 80006d8:	f000 f810 	bl	80006fc <SimulateReadWriteOperation>

    // Set Start flag back to Up to indicate resource is free
    StartFlag = 1;
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <AccessSharedData+0x3c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]

    // Turn off Blue LED (if it was turned on during contention)
    HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, LOW);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <AccessSharedData+0x40>)
 80006ea:	f000 fc39 	bl	8000f60 <HAL_GPIO_WritePin>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000088 	.word	0x20000088
 80006f8:	40020000 	.word	0x40020000

080006fc <SimulateReadWriteOperation>:

void SimulateReadWriteOperation(void) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
    volatile uint32_t delay_count = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
    const uint32_t delay_target = 1000000; // Adjust this value to approximate 500 ms
 8000706:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <SimulateReadWriteOperation+0x34>)
 8000708:	607b      	str	r3, [r7, #4]

    // Dummy loop to simulate processing time
    for (delay_count = 0; delay_count < delay_target; delay_count++) {
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	e003      	b.n	8000718 <SimulateReadWriteOperation+0x1c>
        __asm("nop"); // No Operation: Keeps the processor busy without changing code behavior
 8000710:	bf00      	nop
    for (delay_count = 0; delay_count < delay_target; delay_count++) {
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	429a      	cmp	r2, r3
 800071e:	d8f7      	bhi.n	8000710 <SimulateReadWriteOperation+0x14>
    }
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	000f4240 	.word	0x000f4240

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f001 fc33 	bl	8001fa8 <osDelay>
 8000742:	e7fb      	b.n	800073c <StartDefaultTask+0x8>

08000744 <GreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenTask */
void GreenTask(void *argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenTask */
  /* Infinite loop */
  for(;;)
  {
	GreenFlag = 1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <GreenTask+0x3c>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
	// Turn on Green LED
	HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, HIGH);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000758:	480a      	ldr	r0, [pc, #40]	@ (8000784 <GreenTask+0x40>)
 800075a:	f000 fc01 	bl	8000f60 <HAL_GPIO_WritePin>

	// Enter critical section
	//taskENTER_CRITICAL();
	AccessSharedData();
 800075e:	f7ff ffab 	bl	80006b8 <AccessSharedData>
	//taskEXIT_CRITICAL(); // Corrected macro usage

	// Turn off Green LED
	HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, LOW);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000768:	4806      	ldr	r0, [pc, #24]	@ (8000784 <GreenTask+0x40>)
 800076a:	f000 fbf9 	bl	8000f60 <HAL_GPIO_WritePin>

	GreenFlag = 0;
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <GreenTask+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
	// Delay for 500 milliseconds
	osDelay(500);
 8000774:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000778:	f001 fc16 	bl	8001fa8 <osDelay>
	GreenFlag = 1;
 800077c:	bf00      	nop
 800077e:	e7e5      	b.n	800074c <GreenTask+0x8>
 8000780:	2000008a 	.word	0x2000008a
 8000784:	40020000 	.word	0x40020000

08000788 <RedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedTask */
void RedTask(void *argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedTask */
  /* Infinite loop */
  for(;;)
  {
	RedFlag = 1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <RedTask+0x3c>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
	// Turn on Red LED
	HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, HIGH);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079c:	480a      	ldr	r0, [pc, #40]	@ (80007c8 <RedTask+0x40>)
 800079e:	f000 fbdf 	bl	8000f60 <HAL_GPIO_WritePin>

	// Enter critical section
	//taskENTER_CRITICAL();
	AccessSharedData();
 80007a2:	f7ff ff89 	bl	80006b8 <AccessSharedData>
	//taskEXIT_CRITICAL(); // Corrected macro usage

	// Turn off Red LED
	HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, LOW);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ac:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <RedTask+0x40>)
 80007ae:	f000 fbd7 	bl	8000f60 <HAL_GPIO_WritePin>

	RedFlag = 0;
 80007b2:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <RedTask+0x3c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
	// Delay for 100 milliseconds
	osDelay(100);
 80007b8:	2064      	movs	r0, #100	@ 0x64
 80007ba:	f001 fbf5 	bl	8001fa8 <osDelay>
	RedFlag = 1;
 80007be:	bf00      	nop
 80007c0:	e7e6      	b.n	8000790 <RedTask+0x8>
 80007c2:	bf00      	nop
 80007c4:	20000089 	.word	0x20000089
 80007c8:	40020000 	.word	0x40020000

080007cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007de:	f000 f939 	bl	8000a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40000800 	.word	0x40000800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <HAL_MspInit+0x54>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080a:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <HAL_MspInit+0x54>)
 800080c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000810:	6453      	str	r3, [r2, #68]	@ 0x44
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <HAL_MspInit+0x54>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <HAL_MspInit+0x54>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <HAL_MspInit+0x54>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	@ 0x40
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <HAL_MspInit+0x54>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	210f      	movs	r1, #15
 800083e:	f06f 0001 	mvn.w	r0, #1
 8000842:	f000 f9df 	bl	8000c04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08e      	sub	sp, #56	@ 0x38
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4b33      	ldr	r3, [pc, #204]	@ (8000938 <HAL_InitTick+0xe4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a32      	ldr	r2, [pc, #200]	@ (8000938 <HAL_InitTick+0xe4>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
 8000874:	4b30      	ldr	r3, [pc, #192]	@ (8000938 <HAL_InitTick+0xe4>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000880:	f107 0210 	add.w	r2, r7, #16
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f000 ffc6 	bl	800181c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000896:	2b00      	cmp	r3, #0
 8000898:	d103      	bne.n	80008a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800089a:	f000 ffab 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 800089e:	6378      	str	r0, [r7, #52]	@ 0x34
 80008a0:	e004      	b.n	80008ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008a2:	f000 ffa7 	bl	80017f4 <HAL_RCC_GetPCLK1Freq>
 80008a6:	4603      	mov	r3, r0
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008ae:	4a23      	ldr	r2, [pc, #140]	@ (800093c <HAL_InitTick+0xe8>)
 80008b0:	fba2 2303 	umull	r2, r3, r2, r3
 80008b4:	0c9b      	lsrs	r3, r3, #18
 80008b6:	3b01      	subs	r3, #1
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <HAL_InitTick+0xec>)
 80008bc:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <HAL_InitTick+0xf0>)
 80008be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <HAL_InitTick+0xec>)
 80008c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008c6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000940 <HAL_InitTick+0xec>)
 80008ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008cc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <HAL_InitTick+0xec>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <HAL_InitTick+0xec>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <HAL_InitTick+0xec>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008e0:	4817      	ldr	r0, [pc, #92]	@ (8000940 <HAL_InitTick+0xec>)
 80008e2:	f000 ffcd 	bl	8001880 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d11b      	bne.n	800092c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008f4:	4812      	ldr	r0, [pc, #72]	@ (8000940 <HAL_InitTick+0xec>)
 80008f6:	f001 f81d 	bl	8001934 <HAL_TIM_Base_Start_IT>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000900:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000904:	2b00      	cmp	r3, #0
 8000906:	d111      	bne.n	800092c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000908:	201e      	movs	r0, #30
 800090a:	f000 f997 	bl	8000c3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d808      	bhi.n	8000926 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	201e      	movs	r0, #30
 800091a:	f000 f973 	bl	8000c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <HAL_InitTick+0xf4>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	e002      	b.n	800092c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800092c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000930:	4618      	mov	r0, r3
 8000932:	3738      	adds	r7, #56	@ 0x38
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	431bde83 	.word	0x431bde83
 8000940:	2000008c 	.word	0x2000008c
 8000944:	40000800 	.word	0x40000800
 8000948:	20000004 	.word	0x20000004

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <TIM4_IRQHandler+0x10>)
 800098a:	f001 f835 	bl	80019f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000008c 	.word	0x2000008c

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	@ (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009c0:	f7ff ffea 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	@ (80009fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ea:	f004 f80b 	bl	8004a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fd6f 	bl	80004d0 <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a00:	08004c08 	.word	0x08004c08
  ldr r2, =_sbss
 8000a04:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a08:	20001c00 	.word	0x20001c00

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f8d8 	bl	8000bee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f7ff ff08 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff feda 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	200000d4 	.word	0x200000d4

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200000d4 	.word	0x200000d4

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	@ (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	@ (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	@ 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff4c 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c16:	f7ff ff61 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f7ff ffb1 	bl	8000b88 <NVIC_EncodePriority>
 8000c26:	4602      	mov	r2, r0
 8000c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff80 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff54 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e159      	b.n	8000f28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f040 8148 	bne.w	8000f22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d005      	beq.n	8000caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d130      	bne.n	8000d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	091b      	lsrs	r3, r3, #4
 8000cf6:	f003 0201 	and.w	r2, r3, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d017      	beq.n	8000d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d123      	bne.n	8000d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	69b9      	ldr	r1, [r7, #24]
 8000d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0203 	and.w	r2, r3, #3
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80a2 	beq.w	8000f22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b57      	ldr	r3, [pc, #348]	@ (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a56      	ldr	r2, [pc, #344]	@ (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b54      	ldr	r3, [pc, #336]	@ (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a52      	ldr	r2, [pc, #328]	@ (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a49      	ldr	r2, [pc, #292]	@ (8000f48 <HAL_GPIO_Init+0x2f0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x202>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a48      	ldr	r2, [pc, #288]	@ (8000f4c <HAL_GPIO_Init+0x2f4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1fe>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a47      	ldr	r2, [pc, #284]	@ (8000f50 <HAL_GPIO_Init+0x2f8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a46      	ldr	r2, [pc, #280]	@ (8000f54 <HAL_GPIO_Init+0x2fc>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1f6>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a45      	ldr	r2, [pc, #276]	@ (8000f58 <HAL_GPIO_Init+0x300>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1f2>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e008      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e004      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	f002 0203 	and.w	r2, r2, #3
 8000e62:	0092      	lsls	r2, r2, #2
 8000e64:	4093      	lsls	r3, r2
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6c:	4935      	ldr	r1, [pc, #212]	@ (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7a:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec8:	4a24      	ldr	r2, [pc, #144]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3301      	adds	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	f67f aea2 	bls.w	8000c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3724      	adds	r7, #36	@ 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40013800 	.word	0x40013800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40013c00 	.word	0x40013c00

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e267      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d075      	beq.n	800109e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fb2:	4b88      	ldr	r3, [pc, #544]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d00c      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fbe:	4b85      	ldr	r3, [pc, #532]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d112      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fca:	4b82      	ldr	r3, [pc, #520]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fd6:	d10b      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d05b      	beq.n	800109c <HAL_RCC_OscConfig+0x108>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d157      	bne.n	800109c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e242      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff8:	d106      	bne.n	8001008 <HAL_RCC_OscConfig+0x74>
 8000ffa:	4b76      	ldr	r3, [pc, #472]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a75      	ldr	r2, [pc, #468]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e01d      	b.n	8001044 <HAL_RCC_OscConfig+0xb0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x98>
 8001012:	4b70      	ldr	r3, [pc, #448]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6f      	ldr	r2, [pc, #444]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b6d      	ldr	r3, [pc, #436]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6c      	ldr	r2, [pc, #432]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0xb0>
 800102c:	4b69      	ldr	r3, [pc, #420]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a68      	ldr	r2, [pc, #416]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b66      	ldr	r3, [pc, #408]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a65      	ldr	r2, [pc, #404]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fd16 	bl	8000a7c <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fd12 	bl	8000a7c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	@ 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e207      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	4b5b      	ldr	r3, [pc, #364]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0xc0>
 8001072:	e014      	b.n	800109e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fd02 	bl	8000a7c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fcfe 	bl	8000a7c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	@ 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1f3      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	4b51      	ldr	r3, [pc, #324]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0xe8>
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d063      	beq.n	8001172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010aa:	4b4a      	ldr	r3, [pc, #296]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b6:	4b47      	ldr	r3, [pc, #284]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d11c      	bne.n	80010fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c2:	4b44      	ldr	r3, [pc, #272]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	4b41      	ldr	r3, [pc, #260]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x152>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e1c7      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4937      	ldr	r1, [pc, #220]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	e03a      	b.n	8001172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d020      	beq.n	8001146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <HAL_RCC_OscConfig+0x244>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110a:	f7ff fcb7 	bl	8000a7c <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fcb3 	bl	8000a7c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1a8      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4925      	ldr	r1, [pc, #148]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e015      	b.n	8001172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001146:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <HAL_RCC_OscConfig+0x244>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fc96 	bl	8000a7c <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001154:	f7ff fc92 	bl	8000a7c <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e187      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d036      	beq.n	80011ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d016      	beq.n	80011b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <HAL_RCC_OscConfig+0x248>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118c:	f7ff fc76 	bl	8000a7c <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fc72 	bl	8000a7c <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e167      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_RCC_OscConfig+0x240>)
 80011a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x200>
 80011b2:	e01b      	b.n	80011ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_RCC_OscConfig+0x248>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ba:	f7ff fc5f 	bl	8000a7c <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	e00e      	b.n	80011e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c2:	f7ff fc5b 	bl	8000a7c <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d907      	bls.n	80011e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e150      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
 80011d4:	40023800 	.word	0x40023800
 80011d8:	42470000 	.word	0x42470000
 80011dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	4b88      	ldr	r3, [pc, #544]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 80011e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1ea      	bne.n	80011c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 8097 	beq.w	8001328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fe:	4b81      	ldr	r3, [pc, #516]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10f      	bne.n	800122a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b7d      	ldr	r3, [pc, #500]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	4a7c      	ldr	r2, [pc, #496]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	@ 0x40
 800121a:	4b7a      	ldr	r3, [pc, #488]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001226:	2301      	movs	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122a:	4b77      	ldr	r3, [pc, #476]	@ (8001408 <HAL_RCC_OscConfig+0x474>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001232:	2b00      	cmp	r3, #0
 8001234:	d118      	bne.n	8001268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001236:	4b74      	ldr	r3, [pc, #464]	@ (8001408 <HAL_RCC_OscConfig+0x474>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a73      	ldr	r2, [pc, #460]	@ (8001408 <HAL_RCC_OscConfig+0x474>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001242:	f7ff fc1b 	bl	8000a7c <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fc17 	bl	8000a7c <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e10c      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	4b6a      	ldr	r3, [pc, #424]	@ (8001408 <HAL_RCC_OscConfig+0x474>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x2ea>
 8001270:	4b64      	ldr	r3, [pc, #400]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001274:	4a63      	ldr	r2, [pc, #396]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6713      	str	r3, [r2, #112]	@ 0x70
 800127c:	e01c      	b.n	80012b8 <HAL_RCC_OscConfig+0x324>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b05      	cmp	r3, #5
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x30c>
 8001286:	4b5f      	ldr	r3, [pc, #380]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128a:	4a5e      	ldr	r2, [pc, #376]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6713      	str	r3, [r2, #112]	@ 0x70
 8001292:	4b5c      	ldr	r3, [pc, #368]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001296:	4a5b      	ldr	r2, [pc, #364]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6713      	str	r3, [r2, #112]	@ 0x70
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0x324>
 80012a0:	4b58      	ldr	r3, [pc, #352]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a4:	4a57      	ldr	r2, [pc, #348]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80012ac:	4b55      	ldr	r3, [pc, #340]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b0:	4a54      	ldr	r2, [pc, #336]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 80012b2:	f023 0304 	bic.w	r3, r3, #4
 80012b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d015      	beq.n	80012ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff fbdc 	bl	8000a7c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f7ff fbd8 	bl	8000a7c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0cb      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012de:	4b49      	ldr	r3, [pc, #292]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0ee      	beq.n	80012c8 <HAL_RCC_OscConfig+0x334>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fbc6 	bl	8000a7c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f2:	e00a      	b.n	800130a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f4:	f7ff fbc2 	bl	8000a7c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e0b5      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130a:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ee      	bne.n	80012f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131c:	4b39      	ldr	r3, [pc, #228]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	4a38      	ldr	r2, [pc, #224]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a1 	beq.w	8001474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001332:	4b34      	ldr	r3, [pc, #208]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	d05c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d141      	bne.n	80013ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001346:	4b31      	ldr	r3, [pc, #196]	@ (800140c <HAL_RCC_OscConfig+0x478>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134c:	f7ff fb96 	bl	8000a7c <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fb92 	bl	8000a7c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e087      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001366:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69da      	ldr	r2, [r3, #28]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001380:	019b      	lsls	r3, r3, #6
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	3b01      	subs	r3, #1
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001394:	061b      	lsls	r3, r3, #24
 8001396:	491b      	ldr	r1, [pc, #108]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <HAL_RCC_OscConfig+0x478>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a2:	f7ff fb6b 	bl	8000a7c <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013aa:	f7ff fb67 	bl	8000a7c <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e05c      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x416>
 80013c8:	e054      	b.n	8001474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <HAL_RCC_OscConfig+0x478>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fb54 	bl	8000a7c <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff fb50 	bl	8000a7c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e045      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_RCC_OscConfig+0x470>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x444>
 80013f6:	e03d      	b.n	8001474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d107      	bne.n	8001410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e038      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000
 800140c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <HAL_RCC_OscConfig+0x4ec>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d028      	beq.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d121      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d11a      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001440:	4013      	ands	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001448:	4293      	cmp	r3, r2
 800144a:	d111      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	3b01      	subs	r3, #1
 800145a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800145c:	429a      	cmp	r2, r3
 800145e:	d107      	bne.n	8001470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0cc      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001498:	4b68      	ldr	r3, [pc, #416]	@ (800163c <HAL_RCC_ClockConfig+0x1b8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d90c      	bls.n	80014c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b65      	ldr	r3, [pc, #404]	@ (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b63      	ldr	r3, [pc, #396]	@ (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0b8      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d8:	4b59      	ldr	r3, [pc, #356]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a58      	ldr	r2, [pc, #352]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f0:	4b53      	ldr	r3, [pc, #332]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a52      	ldr	r2, [pc, #328]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fc:	4b50      	ldr	r3, [pc, #320]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	494d      	ldr	r1, [pc, #308]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d044      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b47      	ldr	r3, [pc, #284]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d119      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e07f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153e:	2b03      	cmp	r3, #3
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e06f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b3b      	ldr	r3, [pc, #236]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e067      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001562:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f023 0203 	bic.w	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4934      	ldr	r1, [pc, #208]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001574:	f7ff fa82 	bl	8000a7c <HAL_GetTick>
 8001578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	e00a      	b.n	8001592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157c:	f7ff fa7e 	bl	8000a7c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e04f      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 020c 	and.w	r2, r3, #12
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d1eb      	bne.n	800157c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a4:	4b25      	ldr	r3, [pc, #148]	@ (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d20c      	bcs.n	80015cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b22      	ldr	r3, [pc, #136]	@ (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e032      	b.n	8001632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d8:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4916      	ldr	r1, [pc, #88]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d009      	beq.n	800160a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f6:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	490e      	ldr	r1, [pc, #56]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800160a:	f000 f821 	bl	8001650 <HAL_RCC_GetSysClockFreq>
 800160e:	4602      	mov	r2, r0
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	490a      	ldr	r1, [pc, #40]	@ (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	5ccb      	ldrb	r3, [r1, r3]
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	4a09      	ldr	r2, [pc, #36]	@ (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <HAL_RCC_ClockConfig+0x1c8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f912 	bl	8000854 <HAL_InitTick>

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00
 8001640:	40023800 	.word	0x40023800
 8001644:	08004be0 	.word	0x08004be0
 8001648:	20000000 	.word	0x20000000
 800164c:	20000004 	.word	0x20000004

08001650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001654:	b090      	sub	sp, #64	@ 0x40
 8001656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001668:	4b59      	ldr	r3, [pc, #356]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d00d      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x40>
 8001674:	2b08      	cmp	r3, #8
 8001676:	f200 80a1 	bhi.w	80017bc <HAL_RCC_GetSysClockFreq+0x16c>
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x34>
 800167e:	2b04      	cmp	r3, #4
 8001680:	d003      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0x3a>
 8001682:	e09b      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b53      	ldr	r3, [pc, #332]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001688:	e09b      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800168a:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800168e:	e098      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001690:	4b4f      	ldr	r3, [pc, #316]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001698:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169a:	4b4d      	ldr	r3, [pc, #308]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d028      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a6:	4b4a      	ldr	r3, [pc, #296]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	2200      	movs	r2, #0
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016b8:	2100      	movs	r1, #0
 80016ba:	4b47      	ldr	r3, [pc, #284]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016bc:	fb03 f201 	mul.w	r2, r3, r1
 80016c0:	2300      	movs	r3, #0
 80016c2:	fb00 f303 	mul.w	r3, r0, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	4a43      	ldr	r2, [pc, #268]	@ (80017d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80016ca:	fba0 1202 	umull	r1, r2, r0, r2
 80016ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016d0:	460a      	mov	r2, r1
 80016d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80016d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016d6:	4413      	add	r3, r2
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016dc:	2200      	movs	r2, #0
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	61fa      	str	r2, [r7, #28]
 80016e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016ea:	f7fe fd79 	bl	80001e0 <__aeabi_uldivmod>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4613      	mov	r3, r2
 80016f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016f6:	e053      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f8:	4b35      	ldr	r3, [pc, #212]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	099b      	lsrs	r3, r3, #6
 80016fe:	2200      	movs	r2, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	617a      	str	r2, [r7, #20]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800170a:	f04f 0b00 	mov.w	fp, #0
 800170e:	4652      	mov	r2, sl
 8001710:	465b      	mov	r3, fp
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0159      	lsls	r1, r3, #5
 800171c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001720:	0150      	lsls	r0, r2, #5
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ebb2 080a 	subs.w	r8, r2, sl
 800172a:	eb63 090b 	sbc.w	r9, r3, fp
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800173a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800173e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001742:	ebb2 0408 	subs.w	r4, r2, r8
 8001746:	eb63 0509 	sbc.w	r5, r3, r9
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	00eb      	lsls	r3, r5, #3
 8001754:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001758:	00e2      	lsls	r2, r4, #3
 800175a:	4614      	mov	r4, r2
 800175c:	461d      	mov	r5, r3
 800175e:	eb14 030a 	adds.w	r3, r4, sl
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	eb45 030b 	adc.w	r3, r5, fp
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001776:	4629      	mov	r1, r5
 8001778:	028b      	lsls	r3, r1, #10
 800177a:	4621      	mov	r1, r4
 800177c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001780:	4621      	mov	r1, r4
 8001782:	028a      	lsls	r2, r1, #10
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800178a:	2200      	movs	r2, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	60fa      	str	r2, [r7, #12]
 8001790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001794:	f7fe fd24 	bl	80001e0 <__aeabi_uldivmod>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4613      	mov	r3, r2
 800179e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	3301      	adds	r3, #1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80017b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017ba:	e002      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3740      	adds	r7, #64	@ 0x40
 80017c8:	46bd      	mov	sp, r7
 80017ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	00f42400 	.word	0x00f42400
 80017d8:	017d7840 	.word	0x017d7840

080017dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000000 	.word	0x20000000

080017f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017f8:	f7ff fff0 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	0a9b      	lsrs	r3, r3, #10
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	4903      	ldr	r1, [pc, #12]	@ (8001818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001810:	4618      	mov	r0, r3
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	08004bf0 	.word	0x08004bf0

0800181c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	220f      	movs	r2, #15
 800182a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800182c:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_RCC_GetClockConfig+0x5c>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0203 	and.w	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001838:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <HAL_RCC_GetClockConfig+0x5c>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_RCC_GetClockConfig+0x5c>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001850:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_RCC_GetClockConfig+0x5c>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <HAL_RCC_GetClockConfig+0x60>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0207 	and.w	r2, r3, #7
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e041      	b.n	8001916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f839 	bl	800191e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4610      	mov	r0, r2
 80018c0:	f000 f9b2 	bl	8001c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d001      	beq.n	800194c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e044      	b.n	80019d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d018      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x6c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001976:	d013      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x6c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1a      	ldr	r2, [pc, #104]	@ (80019e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00e      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x6c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a19      	ldr	r2, [pc, #100]	@ (80019ec <HAL_TIM_Base_Start_IT+0xb8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d009      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x6c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d004      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x6c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a16      	ldr	r2, [pc, #88]	@ (80019f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d111      	bne.n	80019c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d010      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c2:	e007      	b.n	80019d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40010000 	.word	0x40010000
 80019e8:	40000400 	.word	0x40000400
 80019ec:	40000800 	.word	0x40000800
 80019f0:	40000c00 	.word	0x40000c00
 80019f4:	40014000 	.word	0x40014000

080019f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d020      	beq.n	8001a5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d01b      	beq.n	8001a5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0202 	mvn.w	r2, #2
 8001a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8d2 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8001a48:	e005      	b.n	8001a56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8c4 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8d5 	bl	8001c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d020      	beq.n	8001aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f06f 0204 	mvn.w	r2, #4
 8001a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8ac 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8001a94:	e005      	b.n	8001aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f89e 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f8af 	bl	8001c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d020      	beq.n	8001af4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01b      	beq.n	8001af4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f06f 0208 	mvn.w	r2, #8
 8001ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2204      	movs	r2, #4
 8001aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f886 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8001ae0:	e005      	b.n	8001aee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f878 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f889 	bl	8001c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d020      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01b      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0210 	mvn.w	r2, #16
 8001b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2208      	movs	r2, #8
 8001b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f860 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8001b2c:	e005      	b.n	8001b3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f852 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f863 	bl	8001c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00c      	beq.n	8001b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0201 	mvn.w	r2, #1
 8001b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe fe34 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00c      	beq.n	8001b88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f8e6 	bl	8001d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00c      	beq.n	8001bac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f834 	bl	8001c14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0220 	mvn.w	r2, #32
 8001bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8b8 	bl	8001d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001d24 <TIM_Base_SetConfig+0xfc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00f      	beq.n	8001c60 <TIM_Base_SetConfig+0x38>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c46:	d00b      	beq.n	8001c60 <TIM_Base_SetConfig+0x38>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a37      	ldr	r2, [pc, #220]	@ (8001d28 <TIM_Base_SetConfig+0x100>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <TIM_Base_SetConfig+0x38>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a36      	ldr	r2, [pc, #216]	@ (8001d2c <TIM_Base_SetConfig+0x104>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d003      	beq.n	8001c60 <TIM_Base_SetConfig+0x38>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a35      	ldr	r2, [pc, #212]	@ (8001d30 <TIM_Base_SetConfig+0x108>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d108      	bne.n	8001c72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a2b      	ldr	r2, [pc, #172]	@ (8001d24 <TIM_Base_SetConfig+0xfc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01b      	beq.n	8001cb2 <TIM_Base_SetConfig+0x8a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c80:	d017      	beq.n	8001cb2 <TIM_Base_SetConfig+0x8a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a28      	ldr	r2, [pc, #160]	@ (8001d28 <TIM_Base_SetConfig+0x100>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <TIM_Base_SetConfig+0x8a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a27      	ldr	r2, [pc, #156]	@ (8001d2c <TIM_Base_SetConfig+0x104>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00f      	beq.n	8001cb2 <TIM_Base_SetConfig+0x8a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a26      	ldr	r2, [pc, #152]	@ (8001d30 <TIM_Base_SetConfig+0x108>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00b      	beq.n	8001cb2 <TIM_Base_SetConfig+0x8a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a25      	ldr	r2, [pc, #148]	@ (8001d34 <TIM_Base_SetConfig+0x10c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <TIM_Base_SetConfig+0x8a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a24      	ldr	r2, [pc, #144]	@ (8001d38 <TIM_Base_SetConfig+0x110>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d003      	beq.n	8001cb2 <TIM_Base_SetConfig+0x8a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a23      	ldr	r2, [pc, #140]	@ (8001d3c <TIM_Base_SetConfig+0x114>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d108      	bne.n	8001cc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a0e      	ldr	r2, [pc, #56]	@ (8001d24 <TIM_Base_SetConfig+0xfc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d103      	bne.n	8001cf8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d105      	bne.n	8001d16 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f023 0201 	bic.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]
  }
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40014000 	.word	0x40014000
 8001d38:	40014400 	.word	0x40014400
 8001d3c:	40014800 	.word	0x40014800

08001d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <__NVIC_SetPriority>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	@ (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <SysTick_Handler+0x1c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001dc4:	f001 fd46 	bl	8003854 <xTaskGetSchedulerState>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d001      	beq.n	8001dd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001dce:	f002 fb3b 	bl	8004448 <xPortSysTickHandler>
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001de0:	2100      	movs	r1, #0
 8001de2:	f06f 0004 	mvn.w	r0, #4
 8001de6:	f7ff ffbf 	bl	8001d68 <__NVIC_SetPriority>
#endif
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001df6:	f3ef 8305 	mrs	r3, IPSR
 8001dfa:	603b      	str	r3, [r7, #0]
  return(result);
 8001dfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e02:	f06f 0305 	mvn.w	r3, #5
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	e00c      	b.n	8001e24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <osKernelInitialize+0x44>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <osKernelInitialize+0x44>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	e002      	b.n	8001e24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200000d8 	.word	0x200000d8

08001e38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e3e:	f3ef 8305 	mrs	r3, IPSR
 8001e42:	603b      	str	r3, [r7, #0]
  return(result);
 8001e44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e4a:	f06f 0305 	mvn.w	r3, #5
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	e010      	b.n	8001e74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <osKernelStart+0x48>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d109      	bne.n	8001e6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e5a:	f7ff ffbf 	bl	8001ddc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <osKernelStart+0x48>)
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e64:	f001 f892 	bl	8002f8c <vTaskStartScheduler>
      stat = osOK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	e002      	b.n	8001e74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e74:	687b      	ldr	r3, [r7, #4]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200000d8 	.word	0x200000d8

08001e84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08e      	sub	sp, #56	@ 0x38
 8001e88:	af04      	add	r7, sp, #16
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e94:	f3ef 8305 	mrs	r3, IPSR
 8001e98:	617b      	str	r3, [r7, #20]
  return(result);
 8001e9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d17e      	bne.n	8001f9e <osThreadNew+0x11a>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d07b      	beq.n	8001f9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001eaa:	2318      	movs	r3, #24
 8001eac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d045      	beq.n	8001f4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <osThreadNew+0x48>
        name = attr->name;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <osThreadNew+0x6e>
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b38      	cmp	r3, #56	@ 0x38
 8001ee4:	d805      	bhi.n	8001ef2 <osThreadNew+0x6e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <osThreadNew+0x72>
        return (NULL);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e054      	b.n	8001fa0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00e      	beq.n	8001f2c <osThreadNew+0xa8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2ba7      	cmp	r3, #167	@ 0xa7
 8001f14:	d90a      	bls.n	8001f2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <osThreadNew+0xa8>
        mem = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	e010      	b.n	8001f4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10c      	bne.n	8001f4e <osThreadNew+0xca>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d108      	bne.n	8001f4e <osThreadNew+0xca>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d104      	bne.n	8001f4e <osThreadNew+0xca>
          mem = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	e001      	b.n	8001f4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d110      	bne.n	8001f76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f5c:	9202      	str	r2, [sp, #8]
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	6a3a      	ldr	r2, [r7, #32]
 8001f68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fe1a 	bl	8002ba4 <xTaskCreateStatic>
 8001f70:	4603      	mov	r3, r0
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	e013      	b.n	8001f9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d110      	bne.n	8001f9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fe68 	bl	8002c64 <xTaskCreate>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d001      	beq.n	8001f9e <osThreadNew+0x11a>
            hTask = NULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f9e:	693b      	ldr	r3, [r7, #16]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3728      	adds	r7, #40	@ 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fb0:	f3ef 8305 	mrs	r3, IPSR
 8001fb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fb6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <osDelay+0x1c>
    stat = osErrorISR;
 8001fbc:	f06f 0305 	mvn.w	r3, #5
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e007      	b.n	8001fd4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 ffa6 	bl	8002f20 <vTaskDelay>
    }
  }

  return (stat);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a07      	ldr	r2, [pc, #28]	@ (800200c <vApplicationGetIdleTaskMemory+0x2c>)
 8001ff0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4a06      	ldr	r2, [pc, #24]	@ (8002010 <vApplicationGetIdleTaskMemory+0x30>)
 8001ff6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2280      	movs	r2, #128	@ 0x80
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	200000dc 	.word	0x200000dc
 8002010:	20000184 	.word	0x20000184

08002014 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <vApplicationGetTimerTaskMemory+0x2c>)
 8002024:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	4a06      	ldr	r2, [pc, #24]	@ (8002044 <vApplicationGetTimerTaskMemory+0x30>)
 800202a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002032:	601a      	str	r2, [r3, #0]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	20000384 	.word	0x20000384
 8002044:	2000042c 	.word	0x2000042c

08002048 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f103 0208 	add.w	r2, r3, #8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f103 0208 	add.w	r2, r3, #8
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f103 0208 	add.w	r2, r3, #8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d103      	bne.n	800210a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e00c      	b.n	8002124 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3308      	adds	r3, #8
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e002      	b.n	8002118 <vListInsert+0x2e>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	429a      	cmp	r2, r3
 8002122:	d2f6      	bcs.n	8002112 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6892      	ldr	r2, [r2, #8]
 8002172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6852      	ldr	r2, [r2, #4]
 800217c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d103      	bne.n	8002190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10b      	bne.n	80021dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021d6:	bf00      	nop
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021dc:	f002 f8a4 	bl	8004328 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	441a      	add	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	3b01      	subs	r3, #1
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	441a      	add	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	22ff      	movs	r2, #255	@ 0xff
 8002220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	22ff      	movs	r2, #255	@ 0xff
 8002228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d114      	bne.n	800225c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01a      	beq.n	8002270 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3310      	adds	r3, #16
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f942 	bl	80034c8 <xTaskRemoveFromEventList>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d012      	beq.n	8002270 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <xQueueGenericReset+0xd0>)
 800224c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	e009      	b.n	8002270 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3310      	adds	r3, #16
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fef1 	bl	8002048 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3324      	adds	r3, #36	@ 0x24
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff feec 	bl	8002048 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002270:	f002 f88c 	bl	800438c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002274:	2301      	movs	r3, #1
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000ed04 	.word	0xe000ed04

08002284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08e      	sub	sp, #56	@ 0x38
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80022b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	e7fd      	b.n	80022ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <xQueueGenericCreateStatic+0x56>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <xQueueGenericCreateStatic+0x5a>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <xQueueGenericCreateStatic+0x5c>
 80022de:	2300      	movs	r3, #0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80022e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	623b      	str	r3, [r7, #32]
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <xQueueGenericCreateStatic+0x84>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <xQueueGenericCreateStatic+0x88>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <xQueueGenericCreateStatic+0x8a>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10b      	bne.n	800232a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	61fb      	str	r3, [r7, #28]
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	e7fd      	b.n	8002326 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800232a:	2350      	movs	r3, #80	@ 0x50
 800232c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b50      	cmp	r3, #80	@ 0x50
 8002332:	d00b      	beq.n	800234c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	61bb      	str	r3, [r7, #24]
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800234c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002360:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f805 	bl	800237e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002376:	4618      	mov	r0, r3
 8002378:	3730      	adds	r7, #48	@ 0x30
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e002      	b.n	80023a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023ac:	2101      	movs	r1, #1
 80023ae:	69b8      	ldr	r0, [r7, #24]
 80023b0:	f7ff fefe 	bl	80021b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	@ 0x38
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80023da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <xQueueGenericSend+0x34>
	__asm volatile
 80023e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e4:	f383 8811 	msr	BASEPRI, r3
 80023e8:	f3bf 8f6f 	isb	sy
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <xQueueGenericSend+0x42>
 80023fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <xQueueGenericSend+0x46>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <xQueueGenericSend+0x48>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <xQueueGenericSend+0x64>
	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d103      	bne.n	8002436 <xQueueGenericSend+0x72>
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <xQueueGenericSend+0x76>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <xQueueGenericSend+0x78>
 800243a:	2300      	movs	r3, #0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <xQueueGenericSend+0x94>
	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	623b      	str	r3, [r7, #32]
}
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002458:	f001 f9fc 	bl	8003854 <xTaskGetSchedulerState>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <xQueueGenericSend+0xa4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <xQueueGenericSend+0xa8>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <xQueueGenericSend+0xaa>
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <xQueueGenericSend+0xc6>
	__asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	61fb      	str	r3, [r7, #28]
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	e7fd      	b.n	8002486 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800248a:	f001 ff4d 	bl	8004328 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800248e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <xQueueGenericSend+0xdc>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d129      	bne.n	80024f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024a6:	f000 fa0f 	bl	80028c8 <prvCopyDataToQueue>
 80024aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b6:	3324      	adds	r3, #36	@ 0x24
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 f805 	bl	80034c8 <xTaskRemoveFromEventList>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024c4:	4b3f      	ldr	r3, [pc, #252]	@ (80025c4 <xQueueGenericSend+0x200>)
 80024c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	e00a      	b.n	80024ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024dc:	4b39      	ldr	r3, [pc, #228]	@ (80025c4 <xQueueGenericSend+0x200>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024ec:	f001 ff4e 	bl	800438c <vPortExitCritical>
				return pdPASS;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e063      	b.n	80025bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024fa:	f001 ff47 	bl	800438c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	e05c      	b.n	80025bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4618      	mov	r0, r3
 800250e:	f001 f83f 	bl	8003590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002512:	2301      	movs	r3, #1
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002516:	f001 ff39 	bl	800438c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800251a:	f000 fda7 	bl	800306c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800251e:	f001 ff03 	bl	8004328 <vPortEnterCritical>
 8002522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002524:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002528:	b25b      	sxtb	r3, r3
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d103      	bne.n	8002538 <xQueueGenericSend+0x174>
 8002530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800253e:	b25b      	sxtb	r3, r3
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d103      	bne.n	800254e <xQueueGenericSend+0x18a>
 8002546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800254e:	f001 ff1d 	bl	800438c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002552:	1d3a      	adds	r2, r7, #4
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f001 f82e 	bl	80035bc <xTaskCheckForTimeOut>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d124      	bne.n	80025b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002566:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002568:	f000 faa6 	bl	8002ab8 <prvIsQueueFull>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d018      	beq.n	80025a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002574:	3310      	adds	r3, #16
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 ff52 	bl	8003424 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002582:	f000 fa31 	bl	80029e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002586:	f000 fd7f 	bl	8003088 <xTaskResumeAll>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f af7c 	bne.w	800248a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002592:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <xQueueGenericSend+0x200>)
 8002594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	e772      	b.n	800248a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025a6:	f000 fa1f 	bl	80029e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025aa:	f000 fd6d 	bl	8003088 <xTaskResumeAll>
 80025ae:	e76c      	b.n	800248a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025b2:	f000 fa19 	bl	80029e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025b6:	f000 fd67 	bl	8003088 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3738      	adds	r7, #56	@ 0x38
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b090      	sub	sp, #64	@ 0x40
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80025da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <xQueueGenericSendFromISR+0x3e>
 80025fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <xQueueGenericSendFromISR+0x42>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <xQueueGenericSendFromISR+0x44>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10b      	bne.n	8002628 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002622:	bf00      	nop
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d103      	bne.n	8002636 <xQueueGenericSendFromISR+0x6e>
 800262e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <xQueueGenericSendFromISR+0x72>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueGenericSendFromISR+0x74>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10b      	bne.n	8002658 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	623b      	str	r3, [r7, #32]
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002658:	f001 ff46 	bl	80044e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800265c:	f3ef 8211 	mrs	r2, BASEPRI
 8002660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	61fa      	str	r2, [r7, #28]
 8002672:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002674:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002676:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800267c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002680:	429a      	cmp	r2, r3
 8002682:	d302      	bcc.n	800268a <xQueueGenericSendFromISR+0xc2>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d12f      	bne.n	80026ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800268a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002690:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002698:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80026a0:	f000 f912 	bl	80028c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d112      	bne.n	80026d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b8:	3324      	adds	r3, #36	@ 0x24
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 ff04 	bl	80034c8 <xTaskRemoveFromEventList>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00e      	beq.n	80026e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e007      	b.n	80026e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026d8:	3301      	adds	r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	b25a      	sxtb	r2, r3
 80026de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80026e4:	2301      	movs	r3, #1
 80026e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80026e8:	e001      	b.n	80026ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3740      	adds	r7, #64	@ 0x40
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08c      	sub	sp, #48	@ 0x30
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002710:	2300      	movs	r3, #0
 8002712:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <xQueueReceive+0x32>
	__asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	623b      	str	r3, [r7, #32]
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	e7fd      	b.n	8002732 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d103      	bne.n	8002744 <xQueueReceive+0x40>
 800273c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <xQueueReceive+0x44>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <xQueueReceive+0x46>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10b      	bne.n	8002766 <xQueueReceive+0x62>
	__asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	61fb      	str	r3, [r7, #28]
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	e7fd      	b.n	8002762 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002766:	f001 f875 	bl	8003854 <xTaskGetSchedulerState>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <xQueueReceive+0x72>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <xQueueReceive+0x76>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <xQueueReceive+0x78>
 800277a:	2300      	movs	r3, #0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <xQueueReceive+0x94>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	61bb      	str	r3, [r7, #24]
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002798:	f001 fdc6 	bl	8004328 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01f      	beq.n	80027e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027ac:	f000 f8f6 	bl	800299c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00f      	beq.n	80027e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c2:	3310      	adds	r3, #16
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fe7f 	bl	80034c8 <xTaskRemoveFromEventList>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027d0:	4b3c      	ldr	r3, [pc, #240]	@ (80028c4 <xQueueReceive+0x1c0>)
 80027d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027e0:	f001 fdd4 	bl	800438c <vPortExitCritical>
				return pdPASS;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e069      	b.n	80028bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027ee:	f001 fdcd 	bl	800438c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e062      	b.n	80028bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fec5 	bl	8003590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002806:	2301      	movs	r3, #1
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800280a:	f001 fdbf 	bl	800438c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800280e:	f000 fc2d 	bl	800306c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002812:	f001 fd89 	bl	8004328 <vPortEnterCritical>
 8002816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002818:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800281c:	b25b      	sxtb	r3, r3
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d103      	bne.n	800282c <xQueueReceive+0x128>
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800282c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002832:	b25b      	sxtb	r3, r3
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d103      	bne.n	8002842 <xQueueReceive+0x13e>
 800283a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002842:	f001 fda3 	bl	800438c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002846:	1d3a      	adds	r2, r7, #4
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f000 feb4 	bl	80035bc <xTaskCheckForTimeOut>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d123      	bne.n	80028a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800285a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800285c:	f000 f916 	bl	8002a8c <prvIsQueueEmpty>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d017      	beq.n	8002896 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002868:	3324      	adds	r3, #36	@ 0x24
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fdd8 	bl	8003424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002874:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002876:	f000 f8b7 	bl	80029e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800287a:	f000 fc05 	bl	8003088 <xTaskResumeAll>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d189      	bne.n	8002798 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <xQueueReceive+0x1c0>)
 8002886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	e780      	b.n	8002798 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002898:	f000 f8a6 	bl	80029e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800289c:	f000 fbf4 	bl	8003088 <xTaskResumeAll>
 80028a0:	e77a      	b.n	8002798 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028a4:	f000 f8a0 	bl	80029e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028a8:	f000 fbee 	bl	8003088 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028ae:	f000 f8ed 	bl	8002a8c <prvIsQueueEmpty>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f43f af6f 	beq.w	8002798 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3730      	adds	r7, #48	@ 0x30
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d14d      	bne.n	800298a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 ffcc 	bl	8003890 <xTaskPriorityDisinherit>
 80028f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	e043      	b.n	800298a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d119      	bne.n	800293c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6858      	ldr	r0, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	461a      	mov	r2, r3
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	f002 f89c 	bl	8004a50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	441a      	add	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	d32b      	bcc.n	800298a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	e026      	b.n	800298a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	68d8      	ldr	r0, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	461a      	mov	r2, r3
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	f002 f882 	bl	8004a50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	425b      	negs	r3, r3
 8002956:	441a      	add	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d207      	bcs.n	8002978 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	425b      	negs	r3, r3
 8002972:	441a      	add	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d105      	bne.n	800298a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	3b01      	subs	r3, #1
 8002988:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002992:	697b      	ldr	r3, [r7, #20]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d018      	beq.n	80029e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	441a      	add	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d303      	bcc.n	80029d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	461a      	mov	r2, r3
 80029da:	6838      	ldr	r0, [r7, #0]
 80029dc:	f002 f838 	bl	8004a50 <memcpy>
	}
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029f0:	f001 fc9a 	bl	8004328 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029fc:	e011      	b.n	8002a22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3324      	adds	r3, #36	@ 0x24
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fd5c 	bl	80034c8 <xTaskRemoveFromEventList>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a16:	f000 fe35 	bl	8003684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	dce9      	bgt.n	80029fe <prvUnlockQueue+0x16>
 8002a2a:	e000      	b.n	8002a2e <prvUnlockQueue+0x46>
					break;
 8002a2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	22ff      	movs	r2, #255	@ 0xff
 8002a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002a36:	f001 fca9 	bl	800438c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a3a:	f001 fc75 	bl	8004328 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a46:	e011      	b.n	8002a6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d012      	beq.n	8002a76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3310      	adds	r3, #16
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fd37 	bl	80034c8 <xTaskRemoveFromEventList>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a60:	f000 fe10 	bl	8003684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	dce9      	bgt.n	8002a48 <prvUnlockQueue+0x60>
 8002a74:	e000      	b.n	8002a78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	22ff      	movs	r2, #255	@ 0xff
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002a80:	f001 fc84 	bl	800438c <vPortExitCritical>
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a94:	f001 fc48 	bl	8004328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e001      	b.n	8002aaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aaa:	f001 fc6f 	bl	800438c <vPortExitCritical>

	return xReturn;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ac0:	f001 fc32 	bl	8004328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d102      	bne.n	8002ad6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e001      	b.n	8002ada <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ada:	f001 fc57 	bl	800438c <vPortExitCritical>

	return xReturn;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	e014      	b.n	8002b22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002af8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b38 <vQueueAddToRegistry+0x50>)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b04:	490c      	ldr	r1, [pc, #48]	@ (8002b38 <vQueueAddToRegistry+0x50>)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <vQueueAddToRegistry+0x50>)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b1a:	e006      	b.n	8002b2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b07      	cmp	r3, #7
 8002b26:	d9e7      	bls.n	8002af8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2000082c 	.word	0x2000082c

08002b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b4c:	f001 fbec 	bl	8004328 <vPortEnterCritical>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d103      	bne.n	8002b66 <vQueueWaitForMessageRestricted+0x2a>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d103      	bne.n	8002b7c <vQueueWaitForMessageRestricted+0x40>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b7c:	f001 fc06 	bl	800438c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3324      	adds	r3, #36	@ 0x24
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fc6d 	bl	8003470 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff26 	bl	80029e8 <prvUnlockQueue>
	}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	@ 0x38
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	623b      	str	r3, [r7, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <xTaskCreateStatic+0x4a>
	__asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	61fb      	str	r3, [r7, #28]
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bee:	23a8      	movs	r3, #168	@ 0xa8
 8002bf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2ba8      	cmp	r3, #168	@ 0xa8
 8002bf6:	d00b      	beq.n	8002c10 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	61bb      	str	r3, [r7, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01e      	beq.n	8002c56 <xTaskCreateStatic+0xb2>
 8002c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01b      	beq.n	8002c56 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c30:	2300      	movs	r3, #0
 8002c32:	9303      	str	r3, [sp, #12]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	9302      	str	r3, [sp, #8]
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f851 	bl	8002cf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c50:	f000 f8f6 	bl	8002e40 <prvAddNewTaskToReadyList>
 8002c54:	e001      	b.n	8002c5a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c5a:	697b      	ldr	r3, [r7, #20]
	}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3728      	adds	r7, #40	@ 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	@ 0x30
 8002c68:	af04      	add	r7, sp, #16
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f001 fc77 	bl	800456c <pvPortMalloc>
 8002c7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00e      	beq.n	8002ca4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c86:	20a8      	movs	r0, #168	@ 0xa8
 8002c88:	f001 fc70 	bl	800456c <pvPortMalloc>
 8002c8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9a:	e005      	b.n	8002ca8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c9c:	6978      	ldr	r0, [r7, #20]
 8002c9e:	f001 fd33 	bl	8004708 <vPortFree>
 8002ca2:	e001      	b.n	8002ca8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d017      	beq.n	8002cde <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9303      	str	r3, [sp, #12]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	9302      	str	r3, [sp, #8]
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f80f 	bl	8002cf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cd2:	69f8      	ldr	r0, [r7, #28]
 8002cd4:	f000 f8b4 	bl	8002e40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	e002      	b.n	8002ce4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
	}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d00:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	461a      	mov	r2, r3
 8002d08:	21a5      	movs	r1, #165	@ 0xa5
 8002d0a:	f001 fe1d 	bl	8004948 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f023 0307 	bic.w	r3, r3, #7
 8002d26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	617b      	str	r3, [r7, #20]
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	e7fd      	b.n	8002d46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01f      	beq.n	8002d90 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	e012      	b.n	8002d7c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	7819      	ldrb	r1, [r3, #0]
 8002d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	3334      	adds	r3, #52	@ 0x34
 8002d66:	460a      	mov	r2, r1
 8002d68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	d9e9      	bls.n	8002d56 <prvInitialiseNewTask+0x66>
 8002d82:	e000      	b.n	8002d86 <prvInitialiseNewTask+0x96>
			{
				break;
 8002d84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d8e:	e003      	b.n	8002d98 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	2b37      	cmp	r3, #55	@ 0x37
 8002d9c:	d901      	bls.n	8002da2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d9e:	2337      	movs	r3, #55	@ 0x37
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002da6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db0:	2200      	movs	r2, #0
 8002db2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db6:	3304      	adds	r3, #4
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f965 	bl	8002088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff f960 	bl	8002088 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dcc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	3354      	adds	r3, #84	@ 0x54
 8002df2:	224c      	movs	r2, #76	@ 0x4c
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 fda6 	bl	8004948 <memset>
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <prvInitialiseNewTask+0x144>)
 8002e00:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	4a0c      	ldr	r2, [pc, #48]	@ (8002e38 <prvInitialiseNewTask+0x148>)
 8002e06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e3c <prvInitialiseNewTask+0x14c>)
 8002e0c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	68f9      	ldr	r1, [r7, #12]
 8002e12:	69b8      	ldr	r0, [r7, #24]
 8002e14:	f001 f95a 	bl	80040cc <pxPortInitialiseStack>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e2a:	bf00      	nop
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20001ac0 	.word	0x20001ac0
 8002e38:	20001b28 	.word	0x20001b28
 8002e3c:	20001b90 	.word	0x20001b90

08002e40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e48:	f001 fa6e 	bl	8004328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f04 <prvAddNewTaskToReadyList+0xc4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a2c      	ldr	r2, [pc, #176]	@ (8002f04 <prvAddNewTaskToReadyList+0xc4>)
 8002e54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e56:	4b2c      	ldr	r3, [pc, #176]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e64:	4b27      	ldr	r3, [pc, #156]	@ (8002f04 <prvAddNewTaskToReadyList+0xc4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d110      	bne.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e6c:	f000 fc2e 	bl	80036cc <prvInitialiseTaskLists>
 8002e70:	e00d      	b.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e72:	4b26      	ldr	r3, [pc, #152]	@ (8002f0c <prvAddNewTaskToReadyList+0xcc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e7a:	4b23      	ldr	r3, [pc, #140]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d802      	bhi.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e88:	4a1f      	ldr	r2, [pc, #124]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <prvAddNewTaskToReadyList+0xd0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <prvAddNewTaskToReadyList+0xd0>)
 8002e96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <prvAddNewTaskToReadyList+0xd0>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <prvAddNewTaskToReadyList+0xd4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d903      	bls.n	8002eb4 <prvAddNewTaskToReadyList+0x74>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <prvAddNewTaskToReadyList+0xd4>)
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4a15      	ldr	r2, [pc, #84]	@ (8002f18 <prvAddNewTaskToReadyList+0xd8>)
 8002ec2:	441a      	add	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7ff f8e9 	bl	80020a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ed0:	f001 fa5c 	bl	800438c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <prvAddNewTaskToReadyList+0xcc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00e      	beq.n	8002efa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d207      	bcs.n	8002efa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <prvAddNewTaskToReadyList+0xdc>)
 8002eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000d40 	.word	0x20000d40
 8002f08:	2000086c 	.word	0x2000086c
 8002f0c:	20000d4c 	.word	0x20000d4c
 8002f10:	20000d5c 	.word	0x20000d5c
 8002f14:	20000d48 	.word	0x20000d48
 8002f18:	20000870 	.word	0x20000870
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f32:	4b14      	ldr	r3, [pc, #80]	@ (8002f84 <vTaskDelay+0x64>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <vTaskDelay+0x32>
	__asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	60bb      	str	r3, [r7, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	e7fd      	b.n	8002f4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f52:	f000 f88b 	bl	800306c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f56:	2100      	movs	r1, #0
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fd09 	bl	8003970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f5e:	f000 f893 	bl	8003088 <xTaskResumeAll>
 8002f62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002f6a:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <vTaskDelay+0x68>)
 8002f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000d68 	.word	0x20000d68
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	@ 0x28
 8002f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f9a:	463a      	mov	r2, r7
 8002f9c:	1d39      	adds	r1, r7, #4
 8002f9e:	f107 0308 	add.w	r3, r7, #8
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f81c 	bl	8001fe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	9202      	str	r2, [sp, #8]
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	460a      	mov	r2, r1
 8002fba:	4924      	ldr	r1, [pc, #144]	@ (800304c <vTaskStartScheduler+0xc0>)
 8002fbc:	4824      	ldr	r0, [pc, #144]	@ (8003050 <vTaskStartScheduler+0xc4>)
 8002fbe:	f7ff fdf1 	bl	8002ba4 <xTaskCreateStatic>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4a23      	ldr	r2, [pc, #140]	@ (8003054 <vTaskStartScheduler+0xc8>)
 8002fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fc8:	4b22      	ldr	r3, [pc, #136]	@ (8003054 <vTaskStartScheduler+0xc8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e001      	b.n	8002fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fe0:	f000 fd1a 	bl	8003a18 <xTimerCreateTimerTask>
 8002fe4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d11b      	bne.n	8003024 <vTaskStartScheduler+0x98>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	613b      	str	r3, [r7, #16]
}
 8002ffe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003000:	4b15      	ldr	r3, [pc, #84]	@ (8003058 <vTaskStartScheduler+0xcc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3354      	adds	r3, #84	@ 0x54
 8003006:	4a15      	ldr	r2, [pc, #84]	@ (800305c <vTaskStartScheduler+0xd0>)
 8003008:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800300a:	4b15      	ldr	r3, [pc, #84]	@ (8003060 <vTaskStartScheduler+0xd4>)
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003012:	4b14      	ldr	r3, [pc, #80]	@ (8003064 <vTaskStartScheduler+0xd8>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003018:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <vTaskStartScheduler+0xdc>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800301e:	f001 f8df 	bl	80041e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003022:	e00f      	b.n	8003044 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d10b      	bne.n	8003044 <vTaskStartScheduler+0xb8>
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	60fb      	str	r3, [r7, #12]
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <vTaskStartScheduler+0xb4>
}
 8003044:	bf00      	nop
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	08004b5c 	.word	0x08004b5c
 8003050:	0800369d 	.word	0x0800369d
 8003054:	20000d64 	.word	0x20000d64
 8003058:	2000086c 	.word	0x2000086c
 800305c:	20000010 	.word	0x20000010
 8003060:	20000d60 	.word	0x20000d60
 8003064:	20000d4c 	.word	0x20000d4c
 8003068:	20000d44 	.word	0x20000d44

0800306c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003070:	4b04      	ldr	r3, [pc, #16]	@ (8003084 <vTaskSuspendAll+0x18>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	4a03      	ldr	r2, [pc, #12]	@ (8003084 <vTaskSuspendAll+0x18>)
 8003078:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800307a:	bf00      	nop
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	20000d68 	.word	0x20000d68

08003088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003096:	4b42      	ldr	r3, [pc, #264]	@ (80031a0 <xTaskResumeAll+0x118>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10b      	bne.n	80030b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	603b      	str	r3, [r7, #0]
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	e7fd      	b.n	80030b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030b6:	f001 f937 	bl	8004328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030ba:	4b39      	ldr	r3, [pc, #228]	@ (80031a0 <xTaskResumeAll+0x118>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3b01      	subs	r3, #1
 80030c0:	4a37      	ldr	r2, [pc, #220]	@ (80031a0 <xTaskResumeAll+0x118>)
 80030c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c4:	4b36      	ldr	r3, [pc, #216]	@ (80031a0 <xTaskResumeAll+0x118>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d162      	bne.n	8003192 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030cc:	4b35      	ldr	r3, [pc, #212]	@ (80031a4 <xTaskResumeAll+0x11c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05e      	beq.n	8003192 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030d4:	e02f      	b.n	8003136 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d6:	4b34      	ldr	r3, [pc, #208]	@ (80031a8 <xTaskResumeAll+0x120>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3318      	adds	r3, #24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f83a 	bl	800215c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f835 	bl	800215c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f6:	4b2d      	ldr	r3, [pc, #180]	@ (80031ac <xTaskResumeAll+0x124>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d903      	bls.n	8003106 <xTaskResumeAll+0x7e>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	4a2a      	ldr	r2, [pc, #168]	@ (80031ac <xTaskResumeAll+0x124>)
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4a27      	ldr	r2, [pc, #156]	@ (80031b0 <xTaskResumeAll+0x128>)
 8003114:	441a      	add	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3304      	adds	r3, #4
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f7fe ffc0 	bl	80020a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003126:	4b23      	ldr	r3, [pc, #140]	@ (80031b4 <xTaskResumeAll+0x12c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	429a      	cmp	r2, r3
 800312e:	d302      	bcc.n	8003136 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003130:	4b21      	ldr	r3, [pc, #132]	@ (80031b8 <xTaskResumeAll+0x130>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003136:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <xTaskResumeAll+0x120>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1cb      	bne.n	80030d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003144:	f000 fb66 	bl	8003814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003148:	4b1c      	ldr	r3, [pc, #112]	@ (80031bc <xTaskResumeAll+0x134>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003154:	f000 f846 	bl	80031e4 <xTaskIncrementTick>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800315e:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <xTaskResumeAll+0x130>)
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f1      	bne.n	8003154 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <xTaskResumeAll+0x134>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <xTaskResumeAll+0x130>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800317e:	2301      	movs	r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <xTaskResumeAll+0x138>)
 8003184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003192:	f001 f8fb 	bl	800438c <vPortExitCritical>

	return xAlreadyYielded;
 8003196:	68bb      	ldr	r3, [r7, #8]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000d68 	.word	0x20000d68
 80031a4:	20000d40 	.word	0x20000d40
 80031a8:	20000d00 	.word	0x20000d00
 80031ac:	20000d48 	.word	0x20000d48
 80031b0:	20000870 	.word	0x20000870
 80031b4:	2000086c 	.word	0x2000086c
 80031b8:	20000d54 	.word	0x20000d54
 80031bc:	20000d50 	.word	0x20000d50
 80031c0:	e000ed04 	.word	0xe000ed04

080031c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031ca:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <xTaskGetTickCount+0x1c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031d0:	687b      	ldr	r3, [r7, #4]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000d44 	.word	0x20000d44

080031e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ee:	4b4f      	ldr	r3, [pc, #316]	@ (800332c <xTaskIncrementTick+0x148>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f040 8090 	bne.w	8003318 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003330 <xTaskIncrementTick+0x14c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003200:	4a4b      	ldr	r2, [pc, #300]	@ (8003330 <xTaskIncrementTick+0x14c>)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d121      	bne.n	8003250 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800320c:	4b49      	ldr	r3, [pc, #292]	@ (8003334 <xTaskIncrementTick+0x150>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	603b      	str	r3, [r7, #0]
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	e7fd      	b.n	800322a <xTaskIncrementTick+0x46>
 800322e:	4b41      	ldr	r3, [pc, #260]	@ (8003334 <xTaskIncrementTick+0x150>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	4b40      	ldr	r3, [pc, #256]	@ (8003338 <xTaskIncrementTick+0x154>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a3e      	ldr	r2, [pc, #248]	@ (8003334 <xTaskIncrementTick+0x150>)
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4a3e      	ldr	r2, [pc, #248]	@ (8003338 <xTaskIncrementTick+0x154>)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b3e      	ldr	r3, [pc, #248]	@ (800333c <xTaskIncrementTick+0x158>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	4a3c      	ldr	r2, [pc, #240]	@ (800333c <xTaskIncrementTick+0x158>)
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	f000 fae2 	bl	8003814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003250:	4b3b      	ldr	r3, [pc, #236]	@ (8003340 <xTaskIncrementTick+0x15c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	429a      	cmp	r2, r3
 8003258:	d349      	bcc.n	80032ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800325a:	4b36      	ldr	r3, [pc, #216]	@ (8003334 <xTaskIncrementTick+0x150>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003264:	4b36      	ldr	r3, [pc, #216]	@ (8003340 <xTaskIncrementTick+0x15c>)
 8003266:	f04f 32ff 	mov.w	r2, #4294967295
 800326a:	601a      	str	r2, [r3, #0]
					break;
 800326c:	e03f      	b.n	80032ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800326e:	4b31      	ldr	r3, [pc, #196]	@ (8003334 <xTaskIncrementTick+0x150>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	d203      	bcs.n	800328e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003286:	4a2e      	ldr	r2, [pc, #184]	@ (8003340 <xTaskIncrementTick+0x15c>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800328c:	e02f      	b.n	80032ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3304      	adds	r3, #4
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe ff62 	bl	800215c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	3318      	adds	r3, #24
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe ff59 	bl	800215c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ae:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <xTaskIncrementTick+0x160>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d903      	bls.n	80032be <xTaskIncrementTick+0xda>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	4a22      	ldr	r2, [pc, #136]	@ (8003344 <xTaskIncrementTick+0x160>)
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <xTaskIncrementTick+0x164>)
 80032cc:	441a      	add	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f7fe fee4 	bl	80020a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <xTaskIncrementTick+0x168>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d3b8      	bcc.n	800325a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80032e8:	2301      	movs	r3, #1
 80032ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ec:	e7b5      	b.n	800325a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032ee:	4b17      	ldr	r3, [pc, #92]	@ (800334c <xTaskIncrementTick+0x168>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f4:	4914      	ldr	r1, [pc, #80]	@ (8003348 <xTaskIncrementTick+0x164>)
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d901      	bls.n	800330a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003306:	2301      	movs	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800330a:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <xTaskIncrementTick+0x16c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003312:	2301      	movs	r3, #1
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e004      	b.n	8003322 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003318:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <xTaskIncrementTick+0x170>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	4a0d      	ldr	r2, [pc, #52]	@ (8003354 <xTaskIncrementTick+0x170>)
 8003320:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003322:	697b      	ldr	r3, [r7, #20]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000d68 	.word	0x20000d68
 8003330:	20000d44 	.word	0x20000d44
 8003334:	20000cf8 	.word	0x20000cf8
 8003338:	20000cfc 	.word	0x20000cfc
 800333c:	20000d58 	.word	0x20000d58
 8003340:	20000d60 	.word	0x20000d60
 8003344:	20000d48 	.word	0x20000d48
 8003348:	20000870 	.word	0x20000870
 800334c:	2000086c 	.word	0x2000086c
 8003350:	20000d54 	.word	0x20000d54
 8003354:	20000d50 	.word	0x20000d50

08003358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800335e:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <vTaskSwitchContext+0xb4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003366:	4b2a      	ldr	r3, [pc, #168]	@ (8003410 <vTaskSwitchContext+0xb8>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800336c:	e047      	b.n	80033fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800336e:	4b28      	ldr	r3, [pc, #160]	@ (8003410 <vTaskSwitchContext+0xb8>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003374:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <vTaskSwitchContext+0xbc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e011      	b.n	80033a0 <vTaskSwitchContext+0x48>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <vTaskSwitchContext+0x42>
	__asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	607b      	str	r3, [r7, #4]
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	e7fd      	b.n	8003396 <vTaskSwitchContext+0x3e>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3b01      	subs	r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	491d      	ldr	r1, [pc, #116]	@ (8003418 <vTaskSwitchContext+0xc0>)
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0e3      	beq.n	800337c <vTaskSwitchContext+0x24>
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4a16      	ldr	r2, [pc, #88]	@ (8003418 <vTaskSwitchContext+0xc0>)
 80033c0:	4413      	add	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3308      	adds	r3, #8
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d104      	bne.n	80033e4 <vTaskSwitchContext+0x8c>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4a0c      	ldr	r2, [pc, #48]	@ (800341c <vTaskSwitchContext+0xc4>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <vTaskSwitchContext+0xbc>)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <vTaskSwitchContext+0xc4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3354      	adds	r3, #84	@ 0x54
 80033fa:	4a09      	ldr	r2, [pc, #36]	@ (8003420 <vTaskSwitchContext+0xc8>)
 80033fc:	6013      	str	r3, [r2, #0]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000d68 	.word	0x20000d68
 8003410:	20000d54 	.word	0x20000d54
 8003414:	20000d48 	.word	0x20000d48
 8003418:	20000870 	.word	0x20000870
 800341c:	2000086c 	.word	0x2000086c
 8003420:	20000010 	.word	0x20000010

08003424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	60fb      	str	r3, [r7, #12]
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800344c:	4b07      	ldr	r3, [pc, #28]	@ (800346c <vTaskPlaceOnEventList+0x48>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3318      	adds	r3, #24
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fe fe48 	bl	80020ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800345a:	2101      	movs	r1, #1
 800345c:	6838      	ldr	r0, [r7, #0]
 800345e:	f000 fa87 	bl	8003970 <prvAddCurrentTaskToDelayedList>
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000086c 	.word	0x2000086c

08003470 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	617b      	str	r3, [r7, #20]
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	e7fd      	b.n	8003496 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3318      	adds	r3, #24
 80034a0:	4619      	mov	r1, r3
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7fe fdfd 	bl	80020a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68b8      	ldr	r0, [r7, #8]
 80034b8:	f000 fa5a 	bl	8003970 <prvAddCurrentTaskToDelayedList>
	}
 80034bc:	bf00      	nop
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	2000086c 	.word	0x2000086c

080034c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	60fb      	str	r3, [r7, #12]
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	e7fd      	b.n	80034f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	3318      	adds	r3, #24
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fe2e 	bl	800215c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <xTaskRemoveFromEventList+0xb0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11d      	bne.n	8003544 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	3304      	adds	r3, #4
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fe25 	bl	800215c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003516:	4b19      	ldr	r3, [pc, #100]	@ (800357c <xTaskRemoveFromEventList+0xb4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d903      	bls.n	8003526 <xTaskRemoveFromEventList+0x5e>
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003522:	4a16      	ldr	r2, [pc, #88]	@ (800357c <xTaskRemoveFromEventList+0xb4>)
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4a13      	ldr	r2, [pc, #76]	@ (8003580 <xTaskRemoveFromEventList+0xb8>)
 8003534:	441a      	add	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3304      	adds	r3, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f7fe fdb0 	bl	80020a2 <vListInsertEnd>
 8003542:	e005      	b.n	8003550 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3318      	adds	r3, #24
 8003548:	4619      	mov	r1, r3
 800354a:	480e      	ldr	r0, [pc, #56]	@ (8003584 <xTaskRemoveFromEventList+0xbc>)
 800354c:	f7fe fda9 	bl	80020a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003554:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <xTaskRemoveFromEventList+0xc0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355a:	429a      	cmp	r2, r3
 800355c:	d905      	bls.n	800356a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800355e:	2301      	movs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <xTaskRemoveFromEventList+0xc4>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e001      	b.n	800356e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800356e:	697b      	ldr	r3, [r7, #20]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000d68 	.word	0x20000d68
 800357c:	20000d48 	.word	0x20000d48
 8003580:	20000870 	.word	0x20000870
 8003584:	20000d00 	.word	0x20000d00
 8003588:	2000086c 	.word	0x2000086c
 800358c:	20000d54 	.word	0x20000d54

08003590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003598:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <vTaskInternalSetTimeOutState+0x24>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <vTaskInternalSetTimeOutState+0x28>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	605a      	str	r2, [r3, #4]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	20000d58 	.word	0x20000d58
 80035b8:	20000d44 	.word	0x20000d44

080035bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	613b      	str	r3, [r7, #16]
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	60fb      	str	r3, [r7, #12]
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	e7fd      	b.n	80035fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003602:	f000 fe91 	bl	8004328 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003606:	4b1d      	ldr	r3, [pc, #116]	@ (800367c <xTaskCheckForTimeOut+0xc0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d102      	bne.n	8003626 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	e023      	b.n	800366e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b15      	ldr	r3, [pc, #84]	@ (8003680 <xTaskCheckForTimeOut+0xc4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d007      	beq.n	8003642 <xTaskCheckForTimeOut+0x86>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800363c:	2301      	movs	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	e015      	b.n	800366e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	429a      	cmp	r2, r3
 800364a:	d20b      	bcs.n	8003664 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	1ad2      	subs	r2, r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff99 	bl	8003590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e004      	b.n	800366e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800366a:	2301      	movs	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800366e:	f000 fe8d 	bl	800438c <vPortExitCritical>

	return xReturn;
 8003672:	69fb      	ldr	r3, [r7, #28]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000d44 	.word	0x20000d44
 8003680:	20000d58 	.word	0x20000d58

08003684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003688:	4b03      	ldr	r3, [pc, #12]	@ (8003698 <vTaskMissedYield+0x14>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
}
 800368e:	bf00      	nop
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	20000d54 	.word	0x20000d54

0800369c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036a4:	f000 f852 	bl	800374c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036a8:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <prvIdleTask+0x28>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d9f9      	bls.n	80036a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <prvIdleTask+0x2c>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036c0:	e7f0      	b.n	80036a4 <prvIdleTask+0x8>
 80036c2:	bf00      	nop
 80036c4:	20000870 	.word	0x20000870
 80036c8:	e000ed04 	.word	0xe000ed04

080036cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	e00c      	b.n	80036f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4a12      	ldr	r2, [pc, #72]	@ (800372c <prvInitialiseTaskLists+0x60>)
 80036e4:	4413      	add	r3, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fcae 	bl	8002048 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3301      	adds	r3, #1
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b37      	cmp	r3, #55	@ 0x37
 80036f6:	d9ef      	bls.n	80036d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036f8:	480d      	ldr	r0, [pc, #52]	@ (8003730 <prvInitialiseTaskLists+0x64>)
 80036fa:	f7fe fca5 	bl	8002048 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036fe:	480d      	ldr	r0, [pc, #52]	@ (8003734 <prvInitialiseTaskLists+0x68>)
 8003700:	f7fe fca2 	bl	8002048 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003704:	480c      	ldr	r0, [pc, #48]	@ (8003738 <prvInitialiseTaskLists+0x6c>)
 8003706:	f7fe fc9f 	bl	8002048 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800370a:	480c      	ldr	r0, [pc, #48]	@ (800373c <prvInitialiseTaskLists+0x70>)
 800370c:	f7fe fc9c 	bl	8002048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003710:	480b      	ldr	r0, [pc, #44]	@ (8003740 <prvInitialiseTaskLists+0x74>)
 8003712:	f7fe fc99 	bl	8002048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003716:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <prvInitialiseTaskLists+0x78>)
 8003718:	4a05      	ldr	r2, [pc, #20]	@ (8003730 <prvInitialiseTaskLists+0x64>)
 800371a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800371c:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <prvInitialiseTaskLists+0x7c>)
 800371e:	4a05      	ldr	r2, [pc, #20]	@ (8003734 <prvInitialiseTaskLists+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000870 	.word	0x20000870
 8003730:	20000cd0 	.word	0x20000cd0
 8003734:	20000ce4 	.word	0x20000ce4
 8003738:	20000d00 	.word	0x20000d00
 800373c:	20000d14 	.word	0x20000d14
 8003740:	20000d2c 	.word	0x20000d2c
 8003744:	20000cf8 	.word	0x20000cf8
 8003748:	20000cfc 	.word	0x20000cfc

0800374c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003752:	e019      	b.n	8003788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003754:	f000 fde8 	bl	8004328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003758:	4b10      	ldr	r3, [pc, #64]	@ (800379c <prvCheckTasksWaitingTermination+0x50>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fcf9 	bl	800215c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <prvCheckTasksWaitingTermination+0x54>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3b01      	subs	r3, #1
 8003770:	4a0b      	ldr	r2, [pc, #44]	@ (80037a0 <prvCheckTasksWaitingTermination+0x54>)
 8003772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003774:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <prvCheckTasksWaitingTermination+0x58>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3b01      	subs	r3, #1
 800377a:	4a0a      	ldr	r2, [pc, #40]	@ (80037a4 <prvCheckTasksWaitingTermination+0x58>)
 800377c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800377e:	f000 fe05 	bl	800438c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f810 	bl	80037a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <prvCheckTasksWaitingTermination+0x58>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e1      	bne.n	8003754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000d14 	.word	0x20000d14
 80037a0:	20000d40 	.word	0x20000d40
 80037a4:	20000d28 	.word	0x20000d28

080037a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3354      	adds	r3, #84	@ 0x54
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 f8cf 	bl	8004958 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d108      	bne.n	80037d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 ff9d 	bl	8004708 <vPortFree>
				vPortFree( pxTCB );
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 ff9a 	bl	8004708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037d4:	e019      	b.n	800380a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d103      	bne.n	80037e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 ff91 	bl	8004708 <vPortFree>
	}
 80037e6:	e010      	b.n	800380a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d00b      	beq.n	800380a <prvDeleteTCB+0x62>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60fb      	str	r3, [r7, #12]
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	e7fd      	b.n	8003806 <prvDeleteTCB+0x5e>
	}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800381a:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <prvResetNextTaskUnblockTime+0x38>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003824:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <prvResetNextTaskUnblockTime+0x3c>)
 8003826:	f04f 32ff 	mov.w	r2, #4294967295
 800382a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800382c:	e008      	b.n	8003840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800382e:	4b07      	ldr	r3, [pc, #28]	@ (800384c <prvResetNextTaskUnblockTime+0x38>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <prvResetNextTaskUnblockTime+0x3c>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	20000cf8 	.word	0x20000cf8
 8003850:	20000d60 	.word	0x20000d60

08003854 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800385a:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <xTaskGetSchedulerState+0x34>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003862:	2301      	movs	r3, #1
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	e008      	b.n	800387a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003868:	4b08      	ldr	r3, [pc, #32]	@ (800388c <xTaskGetSchedulerState+0x38>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003870:	2302      	movs	r3, #2
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	e001      	b.n	800387a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800387a:	687b      	ldr	r3, [r7, #4]
	}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	20000d4c 	.word	0x20000d4c
 800388c:	20000d68 	.word	0x20000d68

08003890 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d058      	beq.n	8003958 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003964 <xTaskPriorityDisinherit+0xd4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d00b      	beq.n	80038c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	60fb      	str	r3, [r7, #12]
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	e7fd      	b.n	80038c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	60bb      	str	r3, [r7, #8]
}
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ec:	1e5a      	subs	r2, r3, #1
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d02c      	beq.n	8003958 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003902:	2b00      	cmp	r3, #0
 8003904:	d128      	bne.n	8003958 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3304      	adds	r3, #4
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fc26 	bl	800215c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003928:	4b0f      	ldr	r3, [pc, #60]	@ (8003968 <xTaskPriorityDisinherit+0xd8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d903      	bls.n	8003938 <xTaskPriorityDisinherit+0xa8>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	4a0c      	ldr	r2, [pc, #48]	@ (8003968 <xTaskPriorityDisinherit+0xd8>)
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4a09      	ldr	r2, [pc, #36]	@ (800396c <xTaskPriorityDisinherit+0xdc>)
 8003946:	441a      	add	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f7fe fba7 	bl	80020a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003958:	697b      	ldr	r3, [r7, #20]
	}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	2000086c 	.word	0x2000086c
 8003968:	20000d48 	.word	0x20000d48
 800396c:	20000870 	.word	0x20000870

08003970 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800397a:	4b21      	ldr	r3, [pc, #132]	@ (8003a00 <prvAddCurrentTaskToDelayedList+0x90>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003980:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3304      	adds	r3, #4
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fbe8 	bl	800215c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d10a      	bne.n	80039aa <prvAddCurrentTaskToDelayedList+0x3a>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800399a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3304      	adds	r3, #4
 80039a0:	4619      	mov	r1, r3
 80039a2:	4819      	ldr	r0, [pc, #100]	@ (8003a08 <prvAddCurrentTaskToDelayedList+0x98>)
 80039a4:	f7fe fb7d 	bl	80020a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039a8:	e026      	b.n	80039f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039b2:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d209      	bcs.n	80039d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039c2:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <prvAddCurrentTaskToDelayedList+0x9c>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f7fe fb8b 	bl	80020ea <vListInsert>
}
 80039d4:	e010      	b.n	80039f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <prvAddCurrentTaskToDelayedList+0xa0>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3304      	adds	r3, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f7fe fb81 	bl	80020ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d202      	bcs.n	80039f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80039f2:	4a08      	ldr	r2, [pc, #32]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000d44 	.word	0x20000d44
 8003a04:	2000086c 	.word	0x2000086c
 8003a08:	20000d2c 	.word	0x20000d2c
 8003a0c:	20000cfc 	.word	0x20000cfc
 8003a10:	20000cf8 	.word	0x20000cf8
 8003a14:	20000d60 	.word	0x20000d60

08003a18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	@ 0x28
 8003a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a22:	f000 fb13 	bl	800404c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a26:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <xTimerCreateTimerTask+0x84>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d021      	beq.n	8003a72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a36:	1d3a      	adds	r2, r7, #4
 8003a38:	f107 0108 	add.w	r1, r7, #8
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fae7 	bl	8002014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	9202      	str	r2, [sp, #8]
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	2302      	movs	r3, #2
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	460a      	mov	r2, r1
 8003a58:	4911      	ldr	r1, [pc, #68]	@ (8003aa0 <xTimerCreateTimerTask+0x88>)
 8003a5a:	4812      	ldr	r0, [pc, #72]	@ (8003aa4 <xTimerCreateTimerTask+0x8c>)
 8003a5c:	f7ff f8a2 	bl	8002ba4 <xTaskCreateStatic>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4a11      	ldr	r2, [pc, #68]	@ (8003aa8 <xTimerCreateTimerTask+0x90>)
 8003a64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a66:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <xTimerCreateTimerTask+0x90>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10b      	bne.n	8003a90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	613b      	str	r3, [r7, #16]
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000d9c 	.word	0x20000d9c
 8003aa0:	08004b64 	.word	0x08004b64
 8003aa4:	08003be5 	.word	0x08003be5
 8003aa8:	20000da0 	.word	0x20000da0

08003aac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	@ 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <xTimerGenericCommand+0x30>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	623b      	str	r3, [r7, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	bf00      	nop
 8003ada:	e7fd      	b.n	8003ad8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003adc:	4b19      	ldr	r3, [pc, #100]	@ (8003b44 <xTimerGenericCommand+0x98>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d02a      	beq.n	8003b3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	dc18      	bgt.n	8003b28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003af6:	f7ff fead 	bl	8003854 <xTaskGetSchedulerState>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d109      	bne.n	8003b14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b00:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <xTimerGenericCommand+0x98>)
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	f107 0110 	add.w	r1, r7, #16
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b0c:	f7fe fc5a 	bl	80023c4 <xQueueGenericSend>
 8003b10:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b12:	e012      	b.n	8003b3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b14:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <xTimerGenericCommand+0x98>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	f107 0110 	add.w	r1, r7, #16
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f7fe fc50 	bl	80023c4 <xQueueGenericSend>
 8003b24:	6278      	str	r0, [r7, #36]	@ 0x24
 8003b26:	e008      	b.n	8003b3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <xTimerGenericCommand+0x98>)
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	f107 0110 	add.w	r1, r7, #16
 8003b30:	2300      	movs	r3, #0
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	f7fe fd48 	bl	80025c8 <xQueueGenericSendFromISR>
 8003b38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3728      	adds	r7, #40	@ 0x28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000d9c 	.word	0x20000d9c

08003b48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b52:	4b23      	ldr	r3, [pc, #140]	@ (8003be0 <prvProcessExpiredTimer+0x98>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fafb 	bl	800215c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d023      	beq.n	8003bbc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	18d1      	adds	r1, r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	6978      	ldr	r0, [r7, #20]
 8003b82:	f000 f8d5 	bl	8003d30 <prvInsertTimerInActiveList>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2300      	movs	r3, #0
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	2100      	movs	r1, #0
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f7ff ff88 	bl	8003aac <xTimerGenericCommand>
 8003b9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d114      	bne.n	8003bce <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	60fb      	str	r3, [r7, #12]
}
 8003bb6:	bf00      	nop
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	6978      	ldr	r0, [r7, #20]
 8003bd4:	4798      	blx	r3
}
 8003bd6:	bf00      	nop
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000d94 	.word	0x20000d94

08003be4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bec:	f107 0308 	add.w	r3, r7, #8
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f859 	bl	8003ca8 <prvGetNextExpireTime>
 8003bf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f805 	bl	8003c0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c02:	f000 f8d7 	bl	8003db4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c06:	bf00      	nop
 8003c08:	e7f0      	b.n	8003bec <prvTimerTask+0x8>
	...

08003c0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c16:	f7ff fa29 	bl	800306c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c1a:	f107 0308 	add.w	r3, r7, #8
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f866 	bl	8003cf0 <prvSampleTimeNow>
 8003c24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d130      	bne.n	8003c8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <prvProcessTimerOrBlockTask+0x3c>
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d806      	bhi.n	8003c48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c3a:	f7ff fa25 	bl	8003088 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff81 	bl	8003b48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c46:	e024      	b.n	8003c92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c4e:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <prvProcessTimerOrBlockTask+0x90>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <prvProcessTimerOrBlockTask+0x50>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <prvProcessTimerOrBlockTask+0x52>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <prvProcessTimerOrBlockTask+0x94>)
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7fe ff65 	bl	8002b3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c72:	f7ff fa09 	bl	8003088 <xTaskResumeAll>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <prvProcessTimerOrBlockTask+0x98>)
 8003c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	f3bf 8f6f 	isb	sy
}
 8003c8c:	e001      	b.n	8003c92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c8e:	f7ff f9fb 	bl	8003088 <xTaskResumeAll>
}
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000d98 	.word	0x20000d98
 8003ca0:	20000d9c 	.word	0x20000d9c
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cec <prvGetNextExpireTime+0x44>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <prvGetNextExpireTime+0x16>
 8003cba:	2201      	movs	r2, #1
 8003cbc:	e000      	b.n	8003cc0 <prvGetNextExpireTime+0x18>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ccc:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <prvGetNextExpireTime+0x44>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e001      	b.n	8003cdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000d94 	.word	0x20000d94

08003cf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003cf8:	f7ff fa64 	bl	80031c4 <xTaskGetTickCount>
 8003cfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <prvSampleTimeNow+0x3c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d205      	bcs.n	8003d14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d08:	f000 f93a 	bl	8003f80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e002      	b.n	8003d1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d1a:	4a04      	ldr	r2, [pc, #16]	@ (8003d2c <prvSampleTimeNow+0x3c>)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d20:	68fb      	ldr	r3, [r7, #12]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000da4 	.word	0x20000da4

08003d30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d812      	bhi.n	8003d7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	1ad2      	subs	r2, r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d302      	bcc.n	8003d6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e01b      	b.n	8003da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <prvInsertTimerInActiveList+0x7c>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f7fe f9b8 	bl	80020ea <vListInsert>
 8003d7a:	e012      	b.n	8003da2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d206      	bcs.n	8003d92 <prvInsertTimerInActiveList+0x62>
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e007      	b.n	8003da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d92:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <prvInsertTimerInActiveList+0x80>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe f9a4 	bl	80020ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003da2:	697b      	ldr	r3, [r7, #20]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000d98 	.word	0x20000d98
 8003db0:	20000d94 	.word	0x20000d94

08003db4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08e      	sub	sp, #56	@ 0x38
 8003db8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dba:	e0ce      	b.n	8003f5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	da19      	bge.n	8003df6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	61fb      	str	r3, [r7, #28]
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	e7fd      	b.n	8003de2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dec:	6850      	ldr	r0, [r2, #4]
 8003dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003df0:	6892      	ldr	r2, [r2, #8]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f2c0 80ae 	blt.w	8003f5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe f9a4 	bl	800215c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e14:	463b      	mov	r3, r7
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ff6a 	bl	8003cf0 <prvSampleTimeNow>
 8003e1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b09      	cmp	r3, #9
 8003e22:	f200 8097 	bhi.w	8003f54 <prvProcessReceivedCommands+0x1a0>
 8003e26:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <prvProcessReceivedCommands+0x78>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e55 	.word	0x08003e55
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e55 	.word	0x08003e55
 8003e38:	08003ecb 	.word	0x08003ecb
 8003e3c:	08003edf 	.word	0x08003edf
 8003e40:	08003f2b 	.word	0x08003f2b
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e55 	.word	0x08003e55
 8003e4c:	08003ecb 	.word	0x08003ecb
 8003e50:	08003edf 	.word	0x08003edf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	18d1      	adds	r1, r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e74:	f7ff ff5c 	bl	8003d30 <prvInsertTimerInActiveList>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d06c      	beq.n	8003f58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d061      	beq.n	8003f58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	441a      	add	r2, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ea6:	f7ff fe01 	bl	8003aac <xTimerGenericCommand>
 8003eaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d152      	bne.n	8003f58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	61bb      	str	r3, [r7, #24]
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003edc:	e03d      	b.n	8003f5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	617b      	str	r3, [r7, #20]
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	e7fd      	b.n	8003f12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	18d1      	adds	r1, r2, r3
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f24:	f7ff ff04 	bl	8003d30 <prvInsertTimerInActiveList>
					break;
 8003f28:	e017      	b.n	8003f5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003f38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f3a:	f000 fbe5 	bl	8004708 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f3e:	e00c      	b.n	8003f5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003f52:	e002      	b.n	8003f5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003f54:	bf00      	nop
 8003f56:	e000      	b.n	8003f5a <prvProcessReceivedCommands+0x1a6>
					break;
 8003f58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f5a:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <prvProcessReceivedCommands+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1d39      	adds	r1, r7, #4
 8003f60:	2200      	movs	r2, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fbce 	bl	8002704 <xQueueReceive>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f47f af26 	bne.w	8003dbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3730      	adds	r7, #48	@ 0x30
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000d9c 	.word	0x20000d9c

08003f80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f86:	e049      	b.n	800401c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f88:	4b2e      	ldr	r3, [pc, #184]	@ (8004044 <prvSwitchTimerLists+0xc4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f92:	4b2c      	ldr	r3, [pc, #176]	@ (8004044 <prvSwitchTimerLists+0xc4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe f8db 	bl	800215c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02f      	beq.n	800401c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d90e      	bls.n	8003fec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fda:	4b1a      	ldr	r3, [pc, #104]	@ (8004044 <prvSwitchTimerLists+0xc4>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7fe f880 	bl	80020ea <vListInsert>
 8003fea:	e017      	b.n	800401c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fec:	2300      	movs	r3, #0
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fd58 	bl	8003aac <xTimerGenericCommand>
 8003ffc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10b      	bne.n	800401c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	603b      	str	r3, [r7, #0]
}
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	e7fd      	b.n	8004018 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800401c:	4b09      	ldr	r3, [pc, #36]	@ (8004044 <prvSwitchTimerLists+0xc4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1b0      	bne.n	8003f88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004026:	4b07      	ldr	r3, [pc, #28]	@ (8004044 <prvSwitchTimerLists+0xc4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800402c:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <prvSwitchTimerLists+0xc8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <prvSwitchTimerLists+0xc4>)
 8004032:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004034:	4a04      	ldr	r2, [pc, #16]	@ (8004048 <prvSwitchTimerLists+0xc8>)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000d94 	.word	0x20000d94
 8004048:	20000d98 	.word	0x20000d98

0800404c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004052:	f000 f969 	bl	8004328 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004056:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <prvCheckForValidListAndQueue+0x60>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d120      	bne.n	80040a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800405e:	4814      	ldr	r0, [pc, #80]	@ (80040b0 <prvCheckForValidListAndQueue+0x64>)
 8004060:	f7fd fff2 	bl	8002048 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004064:	4813      	ldr	r0, [pc, #76]	@ (80040b4 <prvCheckForValidListAndQueue+0x68>)
 8004066:	f7fd ffef 	bl	8002048 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800406a:	4b13      	ldr	r3, [pc, #76]	@ (80040b8 <prvCheckForValidListAndQueue+0x6c>)
 800406c:	4a10      	ldr	r2, [pc, #64]	@ (80040b0 <prvCheckForValidListAndQueue+0x64>)
 800406e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004070:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <prvCheckForValidListAndQueue+0x70>)
 8004072:	4a10      	ldr	r2, [pc, #64]	@ (80040b4 <prvCheckForValidListAndQueue+0x68>)
 8004074:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004076:	2300      	movs	r3, #0
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <prvCheckForValidListAndQueue+0x74>)
 800407c:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <prvCheckForValidListAndQueue+0x78>)
 800407e:	2110      	movs	r1, #16
 8004080:	200a      	movs	r0, #10
 8004082:	f7fe f8ff 	bl	8002284 <xQueueGenericCreateStatic>
 8004086:	4603      	mov	r3, r0
 8004088:	4a08      	ldr	r2, [pc, #32]	@ (80040ac <prvCheckForValidListAndQueue+0x60>)
 800408a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800408c:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <prvCheckForValidListAndQueue+0x60>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <prvCheckForValidListAndQueue+0x60>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	490b      	ldr	r1, [pc, #44]	@ (80040c8 <prvCheckForValidListAndQueue+0x7c>)
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fd24 	bl	8002ae8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040a0:	f000 f974 	bl	800438c <vPortExitCritical>
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000d9c 	.word	0x20000d9c
 80040b0:	20000d6c 	.word	0x20000d6c
 80040b4:	20000d80 	.word	0x20000d80
 80040b8:	20000d94 	.word	0x20000d94
 80040bc:	20000d98 	.word	0x20000d98
 80040c0:	20000e48 	.word	0x20000e48
 80040c4:	20000da8 	.word	0x20000da8
 80040c8:	08004b6c 	.word	0x08004b6c

080040cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3b04      	subs	r3, #4
 80040dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3b04      	subs	r3, #4
 80040ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f023 0201 	bic.w	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3b04      	subs	r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004130 <pxPortInitialiseStack+0x64>)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3b14      	subs	r3, #20
 8004106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3b04      	subs	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f06f 0202 	mvn.w	r2, #2
 800411a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3b20      	subs	r3, #32
 8004120:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	08004135 	.word	0x08004135

08004134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800413e:	4b13      	ldr	r3, [pc, #76]	@ (800418c <prvTaskExitError+0x58>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d00b      	beq.n	8004160 <prvTaskExitError+0x2c>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	60fb      	str	r3, [r7, #12]
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	e7fd      	b.n	800415c <prvTaskExitError+0x28>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	60bb      	str	r3, [r7, #8]
}
 8004172:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004174:	bf00      	nop
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0fc      	beq.n	8004176 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	2000000c 	.word	0x2000000c

08004190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004190:	4b07      	ldr	r3, [pc, #28]	@ (80041b0 <pxCurrentTCBConst2>)
 8004192:	6819      	ldr	r1, [r3, #0]
 8004194:	6808      	ldr	r0, [r1, #0]
 8004196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419a:	f380 8809 	msr	PSP, r0
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f380 8811 	msr	BASEPRI, r0
 80041aa:	4770      	bx	lr
 80041ac:	f3af 8000 	nop.w

080041b0 <pxCurrentTCBConst2>:
 80041b0:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop

080041b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041b8:	4808      	ldr	r0, [pc, #32]	@ (80041dc <prvPortStartFirstTask+0x24>)
 80041ba:	6800      	ldr	r0, [r0, #0]
 80041bc:	6800      	ldr	r0, [r0, #0]
 80041be:	f380 8808 	msr	MSP, r0
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f380 8814 	msr	CONTROL, r0
 80041ca:	b662      	cpsie	i
 80041cc:	b661      	cpsie	f
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	df00      	svc	0
 80041d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041da:	bf00      	nop
 80041dc:	e000ed08 	.word	0xe000ed08

080041e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041e6:	4b47      	ldr	r3, [pc, #284]	@ (8004304 <xPortStartScheduler+0x124>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a47      	ldr	r2, [pc, #284]	@ (8004308 <xPortStartScheduler+0x128>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10b      	bne.n	8004208 <xPortStartScheduler+0x28>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	613b      	str	r3, [r7, #16]
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004208:	4b3e      	ldr	r3, [pc, #248]	@ (8004304 <xPortStartScheduler+0x124>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3f      	ldr	r2, [pc, #252]	@ (800430c <xPortStartScheduler+0x12c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10b      	bne.n	800422a <xPortStartScheduler+0x4a>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	60fb      	str	r3, [r7, #12]
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	e7fd      	b.n	8004226 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800422a:	4b39      	ldr	r3, [pc, #228]	@ (8004310 <xPortStartScheduler+0x130>)
 800422c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	22ff      	movs	r2, #255	@ 0xff
 800423a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4b31      	ldr	r3, [pc, #196]	@ (8004314 <xPortStartScheduler+0x134>)
 8004250:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004252:	4b31      	ldr	r3, [pc, #196]	@ (8004318 <xPortStartScheduler+0x138>)
 8004254:	2207      	movs	r2, #7
 8004256:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004258:	e009      	b.n	800426e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800425a:	4b2f      	ldr	r3, [pc, #188]	@ (8004318 <xPortStartScheduler+0x138>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3b01      	subs	r3, #1
 8004260:	4a2d      	ldr	r2, [pc, #180]	@ (8004318 <xPortStartScheduler+0x138>)
 8004262:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004276:	2b80      	cmp	r3, #128	@ 0x80
 8004278:	d0ef      	beq.n	800425a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800427a:	4b27      	ldr	r3, [pc, #156]	@ (8004318 <xPortStartScheduler+0x138>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1c3 0307 	rsb	r3, r3, #7
 8004282:	2b04      	cmp	r3, #4
 8004284:	d00b      	beq.n	800429e <xPortStartScheduler+0xbe>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60bb      	str	r3, [r7, #8]
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	e7fd      	b.n	800429a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800429e:	4b1e      	ldr	r3, [pc, #120]	@ (8004318 <xPortStartScheduler+0x138>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004318 <xPortStartScheduler+0x138>)
 80042a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <xPortStartScheduler+0x138>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042b0:	4a19      	ldr	r2, [pc, #100]	@ (8004318 <xPortStartScheduler+0x138>)
 80042b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042bc:	4b17      	ldr	r3, [pc, #92]	@ (800431c <xPortStartScheduler+0x13c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a16      	ldr	r2, [pc, #88]	@ (800431c <xPortStartScheduler+0x13c>)
 80042c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042c8:	4b14      	ldr	r3, [pc, #80]	@ (800431c <xPortStartScheduler+0x13c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a13      	ldr	r2, [pc, #76]	@ (800431c <xPortStartScheduler+0x13c>)
 80042ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80042d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042d4:	f000 f8da 	bl	800448c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042d8:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <xPortStartScheduler+0x140>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042de:	f000 f8f9 	bl	80044d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <xPortStartScheduler+0x144>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004324 <xPortStartScheduler+0x144>)
 80042e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80042ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042ee:	f7ff ff63 	bl	80041b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042f2:	f7ff f831 	bl	8003358 <vTaskSwitchContext>
	prvTaskExitError();
 80042f6:	f7ff ff1d 	bl	8004134 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	e000ed00 	.word	0xe000ed00
 8004308:	410fc271 	.word	0x410fc271
 800430c:	410fc270 	.word	0x410fc270
 8004310:	e000e400 	.word	0xe000e400
 8004314:	20000e98 	.word	0x20000e98
 8004318:	20000e9c 	.word	0x20000e9c
 800431c:	e000ed20 	.word	0xe000ed20
 8004320:	2000000c 	.word	0x2000000c
 8004324:	e000ef34 	.word	0xe000ef34

08004328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	607b      	str	r3, [r7, #4]
}
 8004340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004342:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <vPortEnterCritical+0x5c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	4a0e      	ldr	r2, [pc, #56]	@ (8004384 <vPortEnterCritical+0x5c>)
 800434a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800434c:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <vPortEnterCritical+0x5c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d110      	bne.n	8004376 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004354:	4b0c      	ldr	r3, [pc, #48]	@ (8004388 <vPortEnterCritical+0x60>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <vPortEnterCritical+0x4e>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	603b      	str	r3, [r7, #0]
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	e7fd      	b.n	8004372 <vPortEnterCritical+0x4a>
	}
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	2000000c 	.word	0x2000000c
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004392:	4b12      	ldr	r3, [pc, #72]	@ (80043dc <vPortExitCritical+0x50>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <vPortExitCritical+0x26>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	607b      	str	r3, [r7, #4]
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043b2:	4b0a      	ldr	r3, [pc, #40]	@ (80043dc <vPortExitCritical+0x50>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	4a08      	ldr	r2, [pc, #32]	@ (80043dc <vPortExitCritical+0x50>)
 80043ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043bc:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <vPortExitCritical+0x50>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <vPortExitCritical+0x44>
 80043c4:	2300      	movs	r3, #0
 80043c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f383 8811 	msr	BASEPRI, r3
}
 80043ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	2000000c 	.word	0x2000000c

080043e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043e0:	f3ef 8009 	mrs	r0, PSP
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <pxCurrentTCBConst>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f01e 0f10 	tst.w	lr, #16
 80043f0:	bf08      	it	eq
 80043f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fa:	6010      	str	r0, [r2, #0]
 80043fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004400:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004404:	f380 8811 	msr	BASEPRI, r0
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f7fe ffa2 	bl	8003358 <vTaskSwitchContext>
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f380 8811 	msr	BASEPRI, r0
 800441c:	bc09      	pop	{r0, r3}
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	6808      	ldr	r0, [r1, #0]
 8004422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004426:	f01e 0f10 	tst.w	lr, #16
 800442a:	bf08      	it	eq
 800442c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004430:	f380 8809 	msr	PSP, r0
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w

08004440 <pxCurrentTCBConst>:
 8004440:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
}
 8004460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004462:	f7fe febf 	bl	80031e4 <xTaskIncrementTick>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800446c:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <xPortSysTickHandler+0x40>)
 800446e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f383 8811 	msr	BASEPRI, r3
}
 800447e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <vPortSetupTimerInterrupt+0x34>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004496:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <vPortSetupTimerInterrupt+0x38>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800449c:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <vPortSetupTimerInterrupt+0x3c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <vPortSetupTimerInterrupt+0x40>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <vPortSetupTimerInterrupt+0x44>)
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ae:	4b04      	ldr	r3, [pc, #16]	@ (80044c0 <vPortSetupTimerInterrupt+0x34>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000e010 	.word	0xe000e010
 80044c4:	e000e018 	.word	0xe000e018
 80044c8:	20000000 	.word	0x20000000
 80044cc:	10624dd3 	.word	0x10624dd3
 80044d0:	e000e014 	.word	0xe000e014

080044d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80044e4 <vPortEnableVFP+0x10>
 80044d8:	6801      	ldr	r1, [r0, #0]
 80044da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80044de:	6001      	str	r1, [r0, #0]
 80044e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044e2:	bf00      	nop
 80044e4:	e000ed88 	.word	0xe000ed88

080044e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044ee:	f3ef 8305 	mrs	r3, IPSR
 80044f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b0f      	cmp	r3, #15
 80044f8:	d915      	bls.n	8004526 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044fa:	4a18      	ldr	r2, [pc, #96]	@ (800455c <vPortValidateInterruptPriority+0x74>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004504:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <vPortValidateInterruptPriority+0x78>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	7afa      	ldrb	r2, [r7, #11]
 800450a:	429a      	cmp	r2, r3
 800450c:	d20b      	bcs.n	8004526 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	e7fd      	b.n	8004522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004526:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <vPortValidateInterruptPriority+0x7c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800452e:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <vPortValidateInterruptPriority+0x80>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d90b      	bls.n	800454e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	603b      	str	r3, [r7, #0]
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	e7fd      	b.n	800454a <vPortValidateInterruptPriority+0x62>
	}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000e3f0 	.word	0xe000e3f0
 8004560:	20000e98 	.word	0x20000e98
 8004564:	e000ed0c 	.word	0xe000ed0c
 8004568:	20000e9c 	.word	0x20000e9c

0800456c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	@ 0x28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004578:	f7fe fd78 	bl	800306c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800457c:	4b5c      	ldr	r3, [pc, #368]	@ (80046f0 <pvPortMalloc+0x184>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004584:	f000 f924 	bl	80047d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004588:	4b5a      	ldr	r3, [pc, #360]	@ (80046f4 <pvPortMalloc+0x188>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f040 8095 	bne.w	80046c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01e      	beq.n	80045da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800459c:	2208      	movs	r2, #8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4413      	add	r3, r2
 80045a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d015      	beq.n	80045da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f023 0307 	bic.w	r3, r3, #7
 80045b4:	3308      	adds	r3, #8
 80045b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <pvPortMalloc+0x6e>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	617b      	str	r3, [r7, #20]
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	e7fd      	b.n	80045d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d06f      	beq.n	80046c0 <pvPortMalloc+0x154>
 80045e0:	4b45      	ldr	r3, [pc, #276]	@ (80046f8 <pvPortMalloc+0x18c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d86a      	bhi.n	80046c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045ea:	4b44      	ldr	r3, [pc, #272]	@ (80046fc <pvPortMalloc+0x190>)
 80045ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045ee:	4b43      	ldr	r3, [pc, #268]	@ (80046fc <pvPortMalloc+0x190>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045f4:	e004      	b.n	8004600 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d903      	bls.n	8004612 <pvPortMalloc+0xa6>
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f1      	bne.n	80045f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004612:	4b37      	ldr	r3, [pc, #220]	@ (80046f0 <pvPortMalloc+0x184>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004618:	429a      	cmp	r2, r3
 800461a:	d051      	beq.n	80046c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2208      	movs	r2, #8
 8004622:	4413      	add	r3, r2
 8004624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	1ad2      	subs	r2, r2, r3
 8004636:	2308      	movs	r3, #8
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	429a      	cmp	r2, r3
 800463c:	d920      	bls.n	8004680 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800463e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4413      	add	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <pvPortMalloc+0xfc>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	613b      	str	r3, [r7, #16]
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	1ad2      	subs	r2, r2, r3
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800467a:	69b8      	ldr	r0, [r7, #24]
 800467c:	f000 f90a 	bl	8004894 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004680:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <pvPortMalloc+0x18c>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	4a1b      	ldr	r2, [pc, #108]	@ (80046f8 <pvPortMalloc+0x18c>)
 800468c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800468e:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <pvPortMalloc+0x18c>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <pvPortMalloc+0x194>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d203      	bcs.n	80046a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800469a:	4b17      	ldr	r3, [pc, #92]	@ (80046f8 <pvPortMalloc+0x18c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a18      	ldr	r2, [pc, #96]	@ (8004700 <pvPortMalloc+0x194>)
 80046a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	4b13      	ldr	r3, [pc, #76]	@ (80046f4 <pvPortMalloc+0x188>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046b6:	4b13      	ldr	r3, [pc, #76]	@ (8004704 <pvPortMalloc+0x198>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3301      	adds	r3, #1
 80046bc:	4a11      	ldr	r2, [pc, #68]	@ (8004704 <pvPortMalloc+0x198>)
 80046be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046c0:	f7fe fce2 	bl	8003088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <pvPortMalloc+0x17a>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60fb      	str	r3, [r7, #12]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <pvPortMalloc+0x176>
	return pvReturn;
 80046e6:	69fb      	ldr	r3, [r7, #28]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3728      	adds	r7, #40	@ 0x28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20001aa8 	.word	0x20001aa8
 80046f4:	20001abc 	.word	0x20001abc
 80046f8:	20001aac 	.word	0x20001aac
 80046fc:	20001aa0 	.word	0x20001aa0
 8004700:	20001ab0 	.word	0x20001ab0
 8004704:	20001ab4 	.word	0x20001ab4

08004708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d04f      	beq.n	80047ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800471a:	2308      	movs	r3, #8
 800471c:	425b      	negs	r3, r3
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4413      	add	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	4b25      	ldr	r3, [pc, #148]	@ (80047c4 <vPortFree+0xbc>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <vPortFree+0x46>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60fb      	str	r3, [r7, #12]
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	e7fd      	b.n	800474a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <vPortFree+0x66>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	60bb      	str	r3, [r7, #8]
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	4b14      	ldr	r3, [pc, #80]	@ (80047c4 <vPortFree+0xbc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01e      	beq.n	80047ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d11a      	bne.n	80047ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	4b0e      	ldr	r3, [pc, #56]	@ (80047c4 <vPortFree+0xbc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	43db      	mvns	r3, r3
 800478e:	401a      	ands	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004794:	f7fe fc6a 	bl	800306c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <vPortFree+0xc0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4413      	add	r3, r2
 80047a2:	4a09      	ldr	r2, [pc, #36]	@ (80047c8 <vPortFree+0xc0>)
 80047a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047a6:	6938      	ldr	r0, [r7, #16]
 80047a8:	f000 f874 	bl	8004894 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047ac:	4b07      	ldr	r3, [pc, #28]	@ (80047cc <vPortFree+0xc4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3301      	adds	r3, #1
 80047b2:	4a06      	ldr	r2, [pc, #24]	@ (80047cc <vPortFree+0xc4>)
 80047b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047b6:	f7fe fc67 	bl	8003088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20001abc 	.word	0x20001abc
 80047c8:	20001aac 	.word	0x20001aac
 80047cc:	20001ab8 	.word	0x20001ab8

080047d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80047da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047dc:	4b27      	ldr	r3, [pc, #156]	@ (800487c <prvHeapInit+0xac>)
 80047de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3307      	adds	r3, #7
 80047ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0307 	bic.w	r3, r3, #7
 80047f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	4a1f      	ldr	r2, [pc, #124]	@ (800487c <prvHeapInit+0xac>)
 8004800:	4413      	add	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004808:	4a1d      	ldr	r2, [pc, #116]	@ (8004880 <prvHeapInit+0xb0>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800480e:	4b1c      	ldr	r3, [pc, #112]	@ (8004880 <prvHeapInit+0xb0>)
 8004810:	2200      	movs	r2, #0
 8004812:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	4413      	add	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800481c:	2208      	movs	r2, #8
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <prvHeapInit+0xb4>)
 8004830:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004832:	4b14      	ldr	r3, [pc, #80]	@ (8004884 <prvHeapInit+0xb4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800483a:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <prvHeapInit+0xb4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	1ad2      	subs	r2, r2, r3
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <prvHeapInit+0xb4>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	4a0a      	ldr	r2, [pc, #40]	@ (8004888 <prvHeapInit+0xb8>)
 800485e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4a09      	ldr	r2, [pc, #36]	@ (800488c <prvHeapInit+0xbc>)
 8004866:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004868:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <prvHeapInit+0xc0>)
 800486a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800486e:	601a      	str	r2, [r3, #0]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	20000ea0 	.word	0x20000ea0
 8004880:	20001aa0 	.word	0x20001aa0
 8004884:	20001aa8 	.word	0x20001aa8
 8004888:	20001ab0 	.word	0x20001ab0
 800488c:	20001aac 	.word	0x20001aac
 8004890:	20001abc 	.word	0x20001abc

08004894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800489c:	4b28      	ldr	r3, [pc, #160]	@ (8004940 <prvInsertBlockIntoFreeList+0xac>)
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e002      	b.n	80048a8 <prvInsertBlockIntoFreeList+0x14>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d8f7      	bhi.n	80048a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	4413      	add	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d108      	bne.n	80048d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	441a      	add	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	441a      	add	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d118      	bne.n	800491c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b15      	ldr	r3, [pc, #84]	@ (8004944 <prvInsertBlockIntoFreeList+0xb0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d00d      	beq.n	8004912 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	441a      	add	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e008      	b.n	8004924 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004912:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <prvInsertBlockIntoFreeList+0xb0>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e003      	b.n	8004924 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d002      	beq.n	8004932 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20001aa0 	.word	0x20001aa0
 8004944:	20001aa8 	.word	0x20001aa8

08004948 <memset>:
 8004948:	4402      	add	r2, r0
 800494a:	4603      	mov	r3, r0
 800494c:	4293      	cmp	r3, r2
 800494e:	d100      	bne.n	8004952 <memset+0xa>
 8004950:	4770      	bx	lr
 8004952:	f803 1b01 	strb.w	r1, [r3], #1
 8004956:	e7f9      	b.n	800494c <memset+0x4>

08004958 <_reclaim_reent>:
 8004958:	4b29      	ldr	r3, [pc, #164]	@ (8004a00 <_reclaim_reent+0xa8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4283      	cmp	r3, r0
 800495e:	b570      	push	{r4, r5, r6, lr}
 8004960:	4604      	mov	r4, r0
 8004962:	d04b      	beq.n	80049fc <_reclaim_reent+0xa4>
 8004964:	69c3      	ldr	r3, [r0, #28]
 8004966:	b1ab      	cbz	r3, 8004994 <_reclaim_reent+0x3c>
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	b16b      	cbz	r3, 8004988 <_reclaim_reent+0x30>
 800496c:	2500      	movs	r5, #0
 800496e:	69e3      	ldr	r3, [r4, #28]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	5959      	ldr	r1, [r3, r5]
 8004974:	2900      	cmp	r1, #0
 8004976:	d13b      	bne.n	80049f0 <_reclaim_reent+0x98>
 8004978:	3504      	adds	r5, #4
 800497a:	2d80      	cmp	r5, #128	@ 0x80
 800497c:	d1f7      	bne.n	800496e <_reclaim_reent+0x16>
 800497e:	69e3      	ldr	r3, [r4, #28]
 8004980:	4620      	mov	r0, r4
 8004982:	68d9      	ldr	r1, [r3, #12]
 8004984:	f000 f872 	bl	8004a6c <_free_r>
 8004988:	69e3      	ldr	r3, [r4, #28]
 800498a:	6819      	ldr	r1, [r3, #0]
 800498c:	b111      	cbz	r1, 8004994 <_reclaim_reent+0x3c>
 800498e:	4620      	mov	r0, r4
 8004990:	f000 f86c 	bl	8004a6c <_free_r>
 8004994:	6961      	ldr	r1, [r4, #20]
 8004996:	b111      	cbz	r1, 800499e <_reclaim_reent+0x46>
 8004998:	4620      	mov	r0, r4
 800499a:	f000 f867 	bl	8004a6c <_free_r>
 800499e:	69e1      	ldr	r1, [r4, #28]
 80049a0:	b111      	cbz	r1, 80049a8 <_reclaim_reent+0x50>
 80049a2:	4620      	mov	r0, r4
 80049a4:	f000 f862 	bl	8004a6c <_free_r>
 80049a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80049aa:	b111      	cbz	r1, 80049b2 <_reclaim_reent+0x5a>
 80049ac:	4620      	mov	r0, r4
 80049ae:	f000 f85d 	bl	8004a6c <_free_r>
 80049b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049b4:	b111      	cbz	r1, 80049bc <_reclaim_reent+0x64>
 80049b6:	4620      	mov	r0, r4
 80049b8:	f000 f858 	bl	8004a6c <_free_r>
 80049bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80049be:	b111      	cbz	r1, 80049c6 <_reclaim_reent+0x6e>
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 f853 	bl	8004a6c <_free_r>
 80049c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80049c8:	b111      	cbz	r1, 80049d0 <_reclaim_reent+0x78>
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 f84e 	bl	8004a6c <_free_r>
 80049d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80049d2:	b111      	cbz	r1, 80049da <_reclaim_reent+0x82>
 80049d4:	4620      	mov	r0, r4
 80049d6:	f000 f849 	bl	8004a6c <_free_r>
 80049da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80049dc:	b111      	cbz	r1, 80049e4 <_reclaim_reent+0x8c>
 80049de:	4620      	mov	r0, r4
 80049e0:	f000 f844 	bl	8004a6c <_free_r>
 80049e4:	6a23      	ldr	r3, [r4, #32]
 80049e6:	b14b      	cbz	r3, 80049fc <_reclaim_reent+0xa4>
 80049e8:	4620      	mov	r0, r4
 80049ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049ee:	4718      	bx	r3
 80049f0:	680e      	ldr	r6, [r1, #0]
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f83a 	bl	8004a6c <_free_r>
 80049f8:	4631      	mov	r1, r6
 80049fa:	e7bb      	b.n	8004974 <_reclaim_reent+0x1c>
 80049fc:	bd70      	pop	{r4, r5, r6, pc}
 80049fe:	bf00      	nop
 8004a00:	20000010 	.word	0x20000010

08004a04 <__libc_init_array>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	4d0d      	ldr	r5, [pc, #52]	@ (8004a3c <__libc_init_array+0x38>)
 8004a08:	4c0d      	ldr	r4, [pc, #52]	@ (8004a40 <__libc_init_array+0x3c>)
 8004a0a:	1b64      	subs	r4, r4, r5
 8004a0c:	10a4      	asrs	r4, r4, #2
 8004a0e:	2600      	movs	r6, #0
 8004a10:	42a6      	cmp	r6, r4
 8004a12:	d109      	bne.n	8004a28 <__libc_init_array+0x24>
 8004a14:	4d0b      	ldr	r5, [pc, #44]	@ (8004a44 <__libc_init_array+0x40>)
 8004a16:	4c0c      	ldr	r4, [pc, #48]	@ (8004a48 <__libc_init_array+0x44>)
 8004a18:	f000 f87e 	bl	8004b18 <_init>
 8004a1c:	1b64      	subs	r4, r4, r5
 8004a1e:	10a4      	asrs	r4, r4, #2
 8004a20:	2600      	movs	r6, #0
 8004a22:	42a6      	cmp	r6, r4
 8004a24:	d105      	bne.n	8004a32 <__libc_init_array+0x2e>
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2c:	4798      	blx	r3
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7ee      	b.n	8004a10 <__libc_init_array+0xc>
 8004a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a36:	4798      	blx	r3
 8004a38:	3601      	adds	r6, #1
 8004a3a:	e7f2      	b.n	8004a22 <__libc_init_array+0x1e>
 8004a3c:	08004c00 	.word	0x08004c00
 8004a40:	08004c00 	.word	0x08004c00
 8004a44:	08004c00 	.word	0x08004c00
 8004a48:	08004c04 	.word	0x08004c04

08004a4c <__retarget_lock_acquire_recursive>:
 8004a4c:	4770      	bx	lr

08004a4e <__retarget_lock_release_recursive>:
 8004a4e:	4770      	bx	lr

08004a50 <memcpy>:
 8004a50:	440a      	add	r2, r1
 8004a52:	4291      	cmp	r1, r2
 8004a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a58:	d100      	bne.n	8004a5c <memcpy+0xc>
 8004a5a:	4770      	bx	lr
 8004a5c:	b510      	push	{r4, lr}
 8004a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a66:	4291      	cmp	r1, r2
 8004a68:	d1f9      	bne.n	8004a5e <memcpy+0xe>
 8004a6a:	bd10      	pop	{r4, pc}

08004a6c <_free_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4605      	mov	r5, r0
 8004a70:	2900      	cmp	r1, #0
 8004a72:	d041      	beq.n	8004af8 <_free_r+0x8c>
 8004a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a78:	1f0c      	subs	r4, r1, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bfb8      	it	lt
 8004a7e:	18e4      	addlt	r4, r4, r3
 8004a80:	f000 f83e 	bl	8004b00 <__malloc_lock>
 8004a84:	4a1d      	ldr	r2, [pc, #116]	@ (8004afc <_free_r+0x90>)
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	b933      	cbnz	r3, 8004a98 <_free_r+0x2c>
 8004a8a:	6063      	str	r3, [r4, #4]
 8004a8c:	6014      	str	r4, [r2, #0]
 8004a8e:	4628      	mov	r0, r5
 8004a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a94:	f000 b83a 	b.w	8004b0c <__malloc_unlock>
 8004a98:	42a3      	cmp	r3, r4
 8004a9a:	d908      	bls.n	8004aae <_free_r+0x42>
 8004a9c:	6820      	ldr	r0, [r4, #0]
 8004a9e:	1821      	adds	r1, r4, r0
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	bf01      	itttt	eq
 8004aa4:	6819      	ldreq	r1, [r3, #0]
 8004aa6:	685b      	ldreq	r3, [r3, #4]
 8004aa8:	1809      	addeq	r1, r1, r0
 8004aaa:	6021      	streq	r1, [r4, #0]
 8004aac:	e7ed      	b.n	8004a8a <_free_r+0x1e>
 8004aae:	461a      	mov	r2, r3
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	b10b      	cbz	r3, 8004ab8 <_free_r+0x4c>
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	d9fa      	bls.n	8004aae <_free_r+0x42>
 8004ab8:	6811      	ldr	r1, [r2, #0]
 8004aba:	1850      	adds	r0, r2, r1
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d10b      	bne.n	8004ad8 <_free_r+0x6c>
 8004ac0:	6820      	ldr	r0, [r4, #0]
 8004ac2:	4401      	add	r1, r0
 8004ac4:	1850      	adds	r0, r2, r1
 8004ac6:	4283      	cmp	r3, r0
 8004ac8:	6011      	str	r1, [r2, #0]
 8004aca:	d1e0      	bne.n	8004a8e <_free_r+0x22>
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	6053      	str	r3, [r2, #4]
 8004ad2:	4408      	add	r0, r1
 8004ad4:	6010      	str	r0, [r2, #0]
 8004ad6:	e7da      	b.n	8004a8e <_free_r+0x22>
 8004ad8:	d902      	bls.n	8004ae0 <_free_r+0x74>
 8004ada:	230c      	movs	r3, #12
 8004adc:	602b      	str	r3, [r5, #0]
 8004ade:	e7d6      	b.n	8004a8e <_free_r+0x22>
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	1821      	adds	r1, r4, r0
 8004ae4:	428b      	cmp	r3, r1
 8004ae6:	bf04      	itt	eq
 8004ae8:	6819      	ldreq	r1, [r3, #0]
 8004aea:	685b      	ldreq	r3, [r3, #4]
 8004aec:	6063      	str	r3, [r4, #4]
 8004aee:	bf04      	itt	eq
 8004af0:	1809      	addeq	r1, r1, r0
 8004af2:	6021      	streq	r1, [r4, #0]
 8004af4:	6054      	str	r4, [r2, #4]
 8004af6:	e7ca      	b.n	8004a8e <_free_r+0x22>
 8004af8:	bd38      	pop	{r3, r4, r5, pc}
 8004afa:	bf00      	nop
 8004afc:	20001bfc 	.word	0x20001bfc

08004b00 <__malloc_lock>:
 8004b00:	4801      	ldr	r0, [pc, #4]	@ (8004b08 <__malloc_lock+0x8>)
 8004b02:	f7ff bfa3 	b.w	8004a4c <__retarget_lock_acquire_recursive>
 8004b06:	bf00      	nop
 8004b08:	20001bf8 	.word	0x20001bf8

08004b0c <__malloc_unlock>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	@ (8004b14 <__malloc_unlock+0x8>)
 8004b0e:	f7ff bf9e 	b.w	8004a4e <__retarget_lock_release_recursive>
 8004b12:	bf00      	nop
 8004b14:	20001bf8 	.word	0x20001bf8

08004b18 <_init>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	bf00      	nop
 8004b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1e:	bc08      	pop	{r3}
 8004b20:	469e      	mov	lr, r3
 8004b22:	4770      	bx	lr

08004b24 <_fini>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr
